<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=Generator content="Microsoft Word 14 (filtered)">
<base target="_self">
<title>Broadcom PCI/PCIe SDK Release Notes</title>
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Cambria;
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
@font-face
	{font-family:"Arial Black";
	panose-1:2 11 10 4 2 1 2 2 2 4;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin-top:3.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	font-size:10.0pt;
	font-family:"Arial","sans-serif";}
h1
	{mso-style-link:"Heading 1 Char";
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	page-break-after:avoid;
	background:black;
	font-size:11.0pt;
	font-family:"Arial Black","sans-serif";
	color:white;
	letter-spacing:-.5pt;
	font-weight:normal;}
h2
	{mso-style-link:"Heading 2 Char";
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:27.5pt;
	text-indent:-.25in;
	page-break-after:avoid;
	font-size:11.0pt;
	font-family:"Arial","sans-serif";
	font-style:italic;}
h3
	{mso-style-link:"Heading 3 Char";
	margin-top:3.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	text-align:center;
	page-break-after:avoid;
	font-size:20.0pt;
	font-family:"Arial","sans-serif";
	font-weight:normal;}
h4
	{mso-style-link:"Heading 4 Char";
	margin-top:3.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	text-align:center;
	page-break-after:avoid;
	font-size:14.0pt;
	font-family:"Arial","sans-serif";
	font-weight:normal;}
h5
	{mso-style-link:"Heading 5 Char";
	margin-top:3.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	text-align:center;
	page-break-after:avoid;
	font-size:14.0pt;
	font-family:"Arial","sans-serif";}
p.MsoTitle, li.MsoTitle, div.MsoTitle
	{mso-style-link:"Title Char";
	margin-top:3.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	text-align:center;
	font-size:22.0pt;
	font-family:"Arial","sans-serif";}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{mso-style-link:"Body Text Char";
	margin-top:3.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:.25in;
	font-size:10.0pt;
	font-family:"Arial","sans-serif";}
p.MsoBodyTextIndent, li.MsoBodyTextIndent, div.MsoBodyTextIndent
	{mso-style-link:"Body Text Indent Char";
	margin-top:3.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:45.0pt;
	font-size:10.0pt;
	font-family:"Arial","sans-serif";}
p.MsoBodyTextIndent2, li.MsoBodyTextIndent2, div.MsoBodyTextIndent2
	{mso-style-link:"Body Text Indent 2 Char";
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:45.0pt;
	font-size:10.0pt;
	font-family:"Arial","sans-serif";}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:none none;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:none none;}
p.MsoDocumentMap, li.MsoDocumentMap, div.MsoDocumentMap
	{mso-style-link:"Document Map Char";
	margin-top:3.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	background:navy;
	font-size:10.0pt;
	font-family:"Tahoma","sans-serif";}
p.MsoListParagraph, li.MsoListParagraph, div.MsoListParagraph
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";}
span.Heading1Char
	{mso-style-name:"Heading 1 Char";
	mso-style-link:"Heading 1";
	font-family:"Cambria","serif";
	color:#365F91;
	font-weight:bold;}
span.Heading2Char
	{mso-style-name:"Heading 2 Char";
	mso-style-link:"Heading 2";
	font-family:"Arial","sans-serif";
	font-weight:bold;
	font-style:italic;}
span.Heading3Char
	{mso-style-name:"Heading 3 Char";
	mso-style-link:"Heading 3";
	font-family:"Cambria","serif";
	color:#4F81BD;
	font-weight:bold;}
span.Heading4Char
	{mso-style-name:"Heading 4 Char";
	mso-style-link:"Heading 4";
	font-family:"Cambria","serif";
	color:#4F81BD;
	font-weight:bold;
	font-style:italic;}
span.Heading5Char
	{mso-style-name:"Heading 5 Char";
	mso-style-link:"Heading 5";
	font-family:"Cambria","serif";
	color:#243F60;}
span.TitleChar
	{mso-style-name:"Title Char";
	mso-style-link:Title;
	font-family:"Cambria","serif";
	color:#17365D;
	letter-spacing:.25pt;}
span.BodyTextChar
	{mso-style-name:"Body Text Char";
	mso-style-link:"Body Text";
	font-family:"Arial","sans-serif";}
span.BodyTextIndentChar
	{mso-style-name:"Body Text Indent Char";
	mso-style-link:"Body Text Indent";
	font-family:"Arial","sans-serif";}
span.BodyTextIndent2Char
	{mso-style-name:"Body Text Indent 2 Char";
	mso-style-link:"Body Text Indent 2";
	font-family:"Arial","sans-serif";}
span.DocumentMapChar
	{mso-style-name:"Document Map Char";
	mso-style-link:"Document Map";
	font-family:"Tahoma","sans-serif";}
p.msolistparagraphcxspfirst, li.msolistparagraphcxspfirst, div.msolistparagraphcxspfirst
	{mso-style-name:msolistparagraphcxspfirst;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";}
p.msolistparagraphcxspmiddle, li.msolistparagraphcxspmiddle, div.msolistparagraphcxspmiddle
	{mso-style-name:msolistparagraphcxspmiddle;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";}
p.msolistparagraphcxsplast, li.msolistparagraphcxsplast, div.msolistparagraphcxsplast
	{mso-style-name:msolistparagraphcxsplast;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";}
p.msochpdefault, li.msochpdefault, div.msochpdefault
	{mso-style-name:msochpdefault;
	margin-right:0in;
	margin-left:0in;
	font-size:10.0pt;
	font-family:"Times New Roman","serif";}
.MsoChpDefault
	{font-size:10.0pt;}
@page WordSection1
	{size:8.5in 11.0in;
	margin:1.0in 65.95pt 1.0in 65.95pt;}
div.WordSection1
	{page:WordSection1;}
-->
</style>

</head>

<body lang=EN-US link=blue vlink=purple>

<div class=WordSection1>

<p class=MsoTitle><span style='font-size:24.0pt;color:#3366FF'>Broadcom
PCI/PCIe SDK</span></p>

<p class=MsoNormal align=center style='text-align:center'>&nbsp;</p>

<p class=MsoNormal align=center style='text-align:center'><span
style='font-size:20.0pt'>Release Notes</span></p>

<p class=MsoNormal align=center style='text-align:center'>&nbsp;</p>

<p class=MsoNormal align=center style='text-align:center'><span
style='font-size:14.0pt'>Version 9.81</span></p>

<p class=MsoNormal align=center style='text-align:center'><span
style='font-size:14.0pt'>Dec 2023</span></p>

<div style='margin-left:5.75pt'>

<div style='border-top:solid white 6.0pt;border-left:solid white 1.0pt;
border-bottom:solid white 1.0pt;border-right:none;padding:3.0pt 0in 3.0pt 3.0pt'>

<h1><a name="_INSTALLATION"></a>Contents</h1>

</div>

</div>

<p class=MsoBodyText><b><i>Important Notes:</i></b></p>

<p class=MsoBodyText style='margin-left:.75in;text-indent:-.25in'>1.<span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span><span style='color:blue'><a href="#_NDA_Required_for">NDA Required for
Full Software Support of PLX PCI Express Switches</a></span></p>

<p class=MsoBodyText style='margin-left:.75in;text-indent:-.25in'>2.<span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span><span style='color:blue'><a href="#_PLX_SDK_Installation_">Distribution
of PCI/PCIe SDK Components</a></span></p>

<p class=MsoBodyText style='margin-left:.75in;text-indent:-.25in'>3.<span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span><span style='color:blue'><a href="#_Designating_a_Device_1">Shipping a
Product with a Broadcom/PLX chip</a></span></p>

<p class=MsoBodyText style='margin-left:.75in;text-indent:-.25in'>4.<span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=MsoHyperlink><a href="#_PLX_SDK_and">PCI/PCIe SDK and I2C</a></span></p>

<p class=MsoBodyText style='margin-left:.75in;text-indent:-.25in'>5.<span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span><a href="#_PLX_Debug_Tools">PCI/PCIe Debug Tools Per-chip Support</a></p>

<p class=MsoBodyText style='margin-left:.75in;text-indent:-.25in'>6.<span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span><a href="#_Compatibility_with_Newer">Compatibility with Newer Versions
of Microsoft Visual Studio &amp; Managed Code</a></p>

<p class=MsoBodyText style='margin-left:.75in;text-indent:-.25in'>7.<span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span><a href="#_PLX_SDK_Compatibility_2">PCI/PCIe Drivers and the 9050 BAR
Errata</a></p>

<p class=MsoBodyText style='margin-left:.75in;text-indent:-.25in'>8.<span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span><a href="#_9.__Increase">Increase Host CPU Write (“Direct Slave”)
Performance to PLX 9000 &amp; 8000 BAR Spaces</a></p>

<p class=MsoBodyText style='margin-left:.75in;text-indent:-.25in'>9.<span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=MsoHyperlink><a href="#_Increased_Direct_Slave_1">Working
with the Generic Local-to-PCI Interrupt (LINT) or GPIO Interrupts</a></span></p>

<p class=MsoBodyText style='margin-left:.75in;text-indent:-.25in'>10.<span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp; </span><a
href="#_Using_the_PLX">Using the PCI/PCIe API Statically Instead of as a
Dynamic Link Library (DLL)</a></p>

<p class=MsoBodyText style='margin-left:.75in;text-indent:-.25in'>11.<span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp; </span><a
href="#_PLX_Digitally_Signed">PCI/PCIe Digitally Signed Windows Drivers</a></p>

<p class=MsoBodyText style='margin-left:.75in;text-indent:-.25in'>12.<span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp; </span><a
href="#_Issue_with_Legacy">Windows IA64 is not supported</a></p>

<p class=MsoBodyText style='margin-left:.75in;text-indent:-.25in'>13.<span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp; </span><a
href="#_13.__Access">Access to PCIe Extended Configuration Space on UEFI
Systems via Windows PCI/PCIe Service driver</a></p>

<p class=MsoBodyText style='margin-left:.5in'>&nbsp;</p>

<p class=MsoBodyText><b><i>Changes in SDK Versions:</i></b></p>

<p class=MsoBodyText style='margin-left:.75in;text-indent:-.25in'><a
href="#_PCI/PCIe_SDK_9.00">PCI/PCIe SDK 9.00</a></p>

<p class=MsoBodyText style='margin-left:.75in;text-indent:-.25in'><a
href="#_PCI/PCIe_SDK_8.30">PCI/PCIe SDK 8.30</a></p>

<p class=MsoBodyText style='margin-left:.75in;text-indent:-.25in'><a
href="#_PCI/PCIe_SDK_8.23">PCI/PCIe SDK 8.23</a></p>

<p class=MsoBodyText style='margin-left:.75in;text-indent:-.25in'><a
href="#_PCI/PCIe_SDK_8.10">PCI/PCIe SDK 8.10</a></p>

<p class=MsoBodyText style='margin-left:.75in;text-indent:-.25in'><a
href="#_PCI/PCIe_SDK_8.0_1">PCI/PCIe SDK 8.0</a></p>

<p class=MsoBodyText style='margin-left:.75in;text-indent:-.25in'><a
href="#_PLX_SDK_7.25_1">PLX SDK 7.25</a></p>

<p class=MsoBodyText style='margin-left:.75in;text-indent:-.25in'><a
href="#_PLX_SDK_7.24_1">PLX SDK 7.24</a></p>

<p class=MsoBodyText style='margin-left:.75in;text-indent:-.25in'><a
href="#_PLX_SDK_7.23">PLX SDK 7.23</a></p>

<p class=MsoBodyText style='margin-left:.75in;text-indent:-.25in'><a
href="#_PLX_SDK_7.20_1">PLX SDK 7.20</a></p>

<p class=MsoBodyText style='margin-left:.75in;text-indent:-.25in'><a
href="#_PLX_SDK_7.10">PLX SDK 7.10</a></p>

<p class=MsoBodyText style='margin-left:.75in;text-indent:-.25in'><a
href="#_PLX_SDK_7.00_1">PLX SDK 7.00</a></p>

<p class=MsoBodyText style='margin-left:.75in;text-indent:-.25in'><a
href="#_PLX_SDK_6.50_1">PLX SDK 6.50</a></p>

<p class=MsoBodyText style='margin-left:.75in;text-indent:-.25in'><a
href="#_PLX_SDK_6.41_1">PLX SDK 6.42</a></p>

<p class=MsoBodyText style='margin-left:.75in;text-indent:-.25in'><a
href="#_PLX_SDK_6.41_2">PLX SDK 6.41</a></p>

<p class=MsoBodyText style='margin-left:.75in;text-indent:-.25in'><a
href="#_PLX_SDK_6.40_1">PLX SDK 6.40</a></p>

<p class=MsoBodyText style='margin-left:.75in;text-indent:-.25in'><a
href="#_PLX_SDK_6.30_1">PLX SDK 6.30</a></p>

<p class=MsoBodyText style='margin-left:.75in;text-indent:-.25in'><a
href="#_PLX_SDK_6.20_">PLX SDK 6.20</a></p>

<p class=MsoBodyText style='margin-left:.75in;text-indent:-.25in'><a
href="#_4.___2">PLX SDK 6.10</a></p>

<p class=MsoBodyText style='margin-left:.75in;text-indent:-.25in'><a
href="#_PLX_SDK_6.00">PLX SDK 6.00</a></p>

<p class=MsoBodyText style='margin-left:.75in;text-indent:-.25in'><a
href="#_PLX_SDK_5.22_">PLX SDK 5.22</a></p>

<p class=MsoBodyText style='margin-left:.75in;text-indent:-.25in'><a
href="#_PLX_SDK_5.21_">PLX SDK 5.21</a></p>

<p class=MsoBodyText style='margin-left:.75in;text-indent:-.25in'><a
href="#_PLX_SDK_5.20_">PLX SDK 5.20</a></p>

<p class=MsoBodyText style='margin-left:.75in;text-indent:-.25in'><a
href="#_PLX_SDK_5.10_1">PLX SDK 5.10</a></p>

<p class=MsoBodyText style='margin-left:.75in;text-indent:-.25in'><a
href="#_PLX_SDK_5.00_1">PLX SDK 5.00</a></p>

<p class=MsoBodyText style='margin-left:.75in;text-indent:-.25in'><a
href="#_PEX_SDK_2.10">PEX SDK 2.10</a></p>

<p class=MsoBodyText style='margin-left:.75in;text-indent:-.25in'><a
href="#_PEX_SDK_2.0">PEX SDK 2.0</a></p>

<p class=MsoBodyText style='margin-left:.75in;text-indent:-.25in'><a
href="#_PCI_SDK_4.40">PCI SDK 4.40</a></p>

<p class=MsoBodyText style='margin-left:.75in;text-indent:-.25in'><a
href="#_PCI_SDK_4.30">PCI SDK 4.30</a></p>

<p class=MsoBodyText style='margin-left:.75in;text-indent:-.25in'><a
href="#_PCI_SDK_4.20">PCI SDK 4.20</a></p>

<p class=MsoBodyText style='margin-left:.75in;text-indent:-.25in'><a
href="#_PCI_SDK_4.10">PCI SDK 4.10</a></p>

<p class=MsoBodyText style='margin-left:.75in;text-indent:-.25in'><a
href="#_PCI_SDK_4.0">PCI SDK 4.0</a></p>

<p class=MsoBodyText style='margin-left:.75in;text-indent:-.25in'><a
href="#_PCI_SDK_3.5">PCI SDK 3.5</a></p>

<p class=MsoBodyText style='margin-left:.75in;text-indent:-.25in'><a
href="#_PCI_SDK_3.4">PCI SDK 3.4</a></p>

<p class=MsoBodyText style='margin-left:.75in;text-indent:-.25in'><a
href="#_SDK_v3.3">PCI SDK 3.3</a></p>

<div style='margin-left:5.75pt'>

<div style='border-top:solid white 6.0pt;border-left:solid white 1.0pt;
border-bottom:solid white 1.0pt;border-right:none;padding:3.0pt 0in 3.0pt 3.0pt'>

<h1>Important Notes</h1>

</div>

</div>

<h2><a name="_Building_Windows_Drivers"></a><a
name="_Manufacturing_Test_Utility"></a><a name="_PLX_SDK_Installation"></a><a
name="_PLX_SDK_Compatibility_1"></a><a name="_Issues_with_PEX"></a><a
name="_Recommended_way_to"></a><a name="_Starting_with_SDK"></a><a
name="_NDA_Required_for"></a>1.<span style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;
</span>NDA Required for Full Software Support of PLX PCI Express <a
href="#_Starting_with_SDK"><span style='color:windowtext'>Switch</span></a>es</h2>

<p class=MsoBodyTextIndent>Beginning with SDK 5.20, an NDA key is required for
complete software support of PLX PCI Express Switches (i.e. 8500 &amp; 8600
parts).&nbsp; The NDA key only affects the PEX Device Editor utility (PDE) and
will not affect any other portion of the SDK.&nbsp; Without an NDA key, access
to PLX switch registers and EEPROM will be disabled in the PDE.&nbsp; Access to
PLX chips through the PLXMon &amp; PlxCm utilities does not require an NDA key.</p>

<p class=MsoBodyText style='margin-left:45.0pt'>To obtain an NDA key, please
contact the sales representative for your region.&nbsp; NDA keys are assigned
based on the PLX switches used in the design.&nbsp; You may update your key
anytime by re-starting the PLX SDK installation and selecting the “<b><i>Modify</i></b>”
option.&nbsp; To find your PLX sales representative, please visit <a
href="https://www.broadcom.com/company/contact" target="_blank">https://www.broadcom.com/company/contact</a>.</p>

<h2><a name="_PLX_SDK_Installation_"></a><a name="_Issues_with_PEX_1"></a><a
name="_Known_Issues_with"></a><a name="_Designating_a_Device"></a><a
name="_Distribution_of_PLX"></a>2.<span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp; </span>Distribution of PCI/PCIe
SDK Components</h2>

<p class=MsoBodyText style='margin-top:12.0pt;margin-right:0in;margin-bottom:
3.0pt;margin-left:45.0pt'><b><span style='font-size:12.0pt;color:blue'>PCI/PCIe
Software License Agreement</span></b></p>

<p class=MsoBodyText style='margin-left:45.0pt'>This section is meant for OEM
customers who have written applications with Broadcom software and intend to
ship it with their product.&nbsp; The PCI/PCIe SDK is provided under a
proprietary license.&nbsp; Specific SDK components are provided under dual license:
the <a href="http://www.gnu.org/licenses/old-licenses/gpl-2.0.html"
target="_blank">GNU General Public License (GPL) version 2</a> and <a
href="http://opensource.org/licenses/BSD-2-Clause">BSD</a> licenses.&nbsp; Only
these components are permitted to be distributed.</p>

<p class=MsoBodyText style='margin-top:12.0pt;margin-right:0in;margin-bottom:
3.0pt;margin-left:45.0pt'><b><span style='font-size:12.0pt;color:blue'>PCI/PCIe
SDK Distribution Restrictions</span></b></p>

<p class=MsoBodyText style='margin-left:45.0pt'>The following restrictions
apply to the distribution of PLX software:</p>

<p class=MsoBodyText style='margin-left:1.25in;text-indent:-27.0pt'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>The complete SDK package may not be distributed</p>

<p class=MsoBodyText style='margin-left:1.25in;text-indent:-27.0pt'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Applications, utilities, or tools provided by Broadcom, for which
Broadcom does not provide source code for, such as PLXMon, GenMon, or the PLX
Device Editor (PDE), may not be distributed.</p>

<p class=MsoBodyText style='margin-left:1.25in;text-indent:-27.0pt'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Tools for which PLX provides source for, such as PlxCm or PlxEep, may be
distributed in binary format.&nbsp; If the tools are modified without removing
“Broadcom” or ‘PLX’ from the name or any displayed output, such as command-line
help, additional text must be added to clearly mention that the tool has been
modified by the 3<sup>rd</sup> party &amp; is not supported by Broadcom/PLX.</p>

<p class=MsoBodyText style='margin-left:1.25in;text-indent:-27.0pt'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Documentation written by Broadcom to explain software architecture or
design or Broadcom reference documentation may not be distributed.</p>

<p class=MsoBodyText style='margin-left:1.25in;text-indent:-27.0pt'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>PCI/PCIe software may only be used in conjunction with designs
containing a Broadcom/PLX device.</p>

<p class=MsoBodyText style='margin-left:1.25in;text-indent:-27.0pt'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Broadcom provides no warranty for distributed PCI/PCIe SDK components
and will not support end-users who have received such components from OEM
vendors.&nbsp; End users must be made aware that Broadcom is not responsible
for support of the OEM product.</p>

<p class=MsoBodyText style='margin-top:12.0pt;margin-right:0in;margin-bottom:
3.0pt;margin-left:45.0pt'><b><span style='font-size:12.0pt;color:blue'>PCI/PCIe
Components Allowed for Distribution</span></b></p>

<p class=MsoBodyText style='margin-left:45.0pt'>Broadcom allows distribution of
the following components required for OEM software to function properly and
utilize the Broadcom/PLX chip through the PCI/PCIe SDK API.</p>

<p class=MsoBodyText style='margin-left:1.25in;text-indent:-27.0pt'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Any scripts needed to install the software and/or load modules.</p>

<p class=MsoBodyText style='margin-left:1.25in;text-indent:-27.0pt'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>PCI/PCIe SDK driver source code may be distributed.</p>

<p class=MsoBodyText style='margin-left:1.25in;text-indent:-27.0pt'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>PCI/PCIe SDK API library source code may be distributed.</p>

<p class=MsoBodyText style='margin-left:1.25in;text-indent:-27.0pt'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>PCI/PCIe SDK header files may be distributed</p>

<p class=MsoBodyText style='margin-left:45.0pt'><b><i>Note</i></b><i>: The
distributable SDK components mentioned above must be distributed independently
from all other non-distributable PCI/PCIe SDK components.</i></p>

<h2><a name="_Designating_a_Device_1"></a>3.<span style='font-size:7.0pt;
font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp; </span>Shipping a
Product with a Broadcom/PLX chip</h2>

<div style='border:none;border-bottom:solid windowtext 1.0pt;padding:0in 0in 1.0pt 0in;
margin-left:45.0pt'>

<p class=MsoBodyTextIndent style='margin-left:0in'><b><span style='color:#00B050'>Designating
a Device ID</span></b></p>

</div>

<p class=MsoBodyTextIndent>If you have created a design with a PLX chip and
plan to ship it to end users, it is important that the PCI ID of the device is
set correctly.&nbsp; This generally applies to PLX 9000 &amp; 8311
products.&nbsp; The ID is determined by a combination of the PCI Device/Vendor
ID (PCI offset 0) and the PCI Subsystem ID (PCI offset 2Ch).&nbsp; It is
important to note the following before shipping your product:</p>

<p class=MsoBodyTextIndent style='margin-left:81.0pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>A
unique ID is required to properly identify your product, ensure no conflicts
with other devices, and ensure the correct software is loaded for your product.</p>

<p class=MsoBodyTextIndent style='margin-left:81.0pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>PLX’s
Vendor ID is 10B5h.&nbsp; This ID is reserved for use exclusively by PLX and
PLX is responsible for maintaining a list of all devices that use this
ID.&nbsp; <b><i>Any devices set with the PLX vendor ID should not be shipped
without express permission from Broadcom</i></b>.</p>

<p class=MsoBodyTextIndent style='margin-left:81.0pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>The
ID is set via an EEPROM that contains values the PLX chip will load upon power
up.</p>

<p class=MsoBodyTextIndent style='margin-left:81.0pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>The
PCI revision ID may also be used to identify a minor revision of your
product.&nbsp; It is recommended, however, to use a new subsystem Device ID to
identify a new revision of the product.</p>

<p class=MsoBodyTextIndent>The proper procedure for determining the ID for you
device is:</p>

<p class=MsoBodyTextIndent style='margin-left:81.0pt;text-indent:-.25in'>1.<span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span>If your company is a member of the PCI SIG, you should already have a
PCI Vendor ID assigned.&nbsp; Your device should be set with this Vendor ID and
the Device ID should be maintained within your company.&nbsp; Refer to the
PCI-SIG website for additional information (<a href="http://www.pcisig.com/"
target="_blank">http://www.pcisig.com</a>).</p>

<p class=MsoBodyTextIndent style='margin-left:81.0pt;text-indent:-.25in'>2.<span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span>If you do not have a Vendor ID, you may contact support for an assigned
subsystem Device ID for your product.&nbsp; Additional information will be
required about the product and the company and then a subsystem ID assigned for
exclusive use for your product.&nbsp; At that point, the Broadcom/PLX chip’s
Device/Vendor ID (PCI offset 0) should be set to the default (e.g. 9054_10B5)
and the subsystem ID will consist of the newly assigned Device ID along with
PLX’s Vendor ID.&nbsp; For example, If PLX assigns 3A49h as the subsystem ID,
the complete subsystem ID would be 3A49_10B5.</p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:81.0pt;text-indent:-.25in'>3.<span style='font-size:7.0pt;
font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp; </span>Once the
complete ID is determined, it is important to program the EEPROM properly and
to modify any software that ships with the device.&nbsp; This ensures that
software applications are able to detect and access the device and also so the
Operating System loads the correct driver for the product.</p>

<div style='border:none;border-bottom:solid windowtext 1.0pt;padding:0in 0in 1.0pt 0in;
margin-left:45.0pt'>

<p class=MsoBodyTextIndent style='margin-left:0in'><b><span style='color:#00B050'>Software
Modifications</span></b></p>

</div>

<p class=MsoBodyTextIndent>If PCI/PCIe SDK API &amp; drivers are used with the
product, it’s important to rename files to avoid conflicts with other vendors
shipping products with PCI/PCIe SDK files.&nbsp; The PCI/PCIe SDK API &amp;
driver versions must match.&nbsp; In other words, if SDK API v6.50 is used, the
driver must also be from v6.50.&nbsp; Before distributing a product, the
following steps are recommended:</p>

<p class=MsoBodyTextIndent style='margin-left:81.0pt;text-indent:-.25in'>1.<span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span>Rename the driver file to a unique name to match your product.&nbsp; PLX
driver file names do not change between PLX SDK versions.&nbsp; For example,
rename <b><i>Plx9056.sys</i></b> to <b><i>AcmeDecoder9056.sys</i></b>.&nbsp;
Windows uses <i>.SYS</i> extension but the same procedure applies to Linux,
which uses <i>.ko</i> for driver extensions.</p>

<p class=MsoBodyTextIndent style='margin-left:81.0pt;text-indent:-.25in'>2.<span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span>In Windows, modify the INF file to account for the updated driver
name.&nbsp; In Linux, modify any scripts used to install the driver.</p>

<p class=MsoBodyTextIndent style='margin-left:81.0pt;text-indent:-.25in'>3.<span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span>In Windows, the PLX API DLL is renamed for every SDK version to include
the version number (e.g. <i>PlxApi720.dll</i>).&nbsp; In addition, internally,
the API DLL will only access PLX drivers of the same version.&nbsp; This should
eliminate most conflicts with other vendors.&nbsp; It is still recommended that
you modify the API DLL to a custom name, especially if any modifications are
made to the original file.&nbsp; The name modification must be made in the
Visual Studio project so that any applications linked with the DLL use the new
name.<br>
In Linux, the PLX API is linked statically by default, so there should be no
name conflict unless the API library is modified to load as a shared object.</p>

<h2><a name="_Known_Issues_with_1"></a><a name="_PLX_SDK_and"></a>4.<span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;
</span>PCI/PCIe SDK and I2C</h2>

<p class=MsoBodyTextIndent>The PCI/PCIe SDK API supports native access to PLX
chips over I2C.&nbsp; At this time, I2C connections are only supported with the
<i>TotalPhase Aardvark I2C/SPI USB</i> device (<a
href="http://www.totalphase.com/products/aardvark_i2cspi" target="_blank">http://www.totalphase.com/products/aardvark_i2cspi</a>).
Starting with PLX SDK 6.40, the PLX API takes advantage of the new I2C API
function <i>aa_i2c_write_read()</i>, which has shown register read performance
improvements up to 33%.&nbsp; This new API call, however, requires TotalPhase
driver package v2.02 or higher.&nbsp; Additionally, the 2.02 drivers require
the Aardvark device firmware to be v3.50 or higher.</p>

<p class=MsoBodyText style='margin-left:45.0pt'>To use I2C with PLX SDK v6.40
or higher, please update your TotalPhase drivers and firmware.&nbsp; The latest
files may be obtained from the <a href="http://www.totalphase.com/"
target="_blank">TotalPhase.com</a> website (<a
href="http://www.totalphase.com/products/aardvark-i2cspi/" target="_blank">http://www.totalphase.com/products/aardvark-i2cspi/</a>).
Current released USB driver versions as of Dec 2019 are 2.16 for Win 7/8 and
version 3.0 for Win 10.</p>

<h2><a name="_Known_Issues_with_2"></a><a name="_PLX_SDK_Compatibility_3"></a><a
name="_PLX_Debug_Tools"></a>5.<span style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;
</span>PCI/PCIe Debug Tools Per-chip Support</h2>

<p class=MsoBodyTextIndent>The PCI/PCIe SDK provides various debug tools,
including PEX Device Editor (PDE) GUI, PlxCm command-line tool, and PLXMon
GUI.&nbsp; Depending upon the chip being used, some features may or may not be
supported in some tools.&nbsp; For legacy devices, including PCI 9000-series,
PCI 6000-series, PCIe 8311, 8111/8112, &amp; 8114, please use either PLXMon GUI
or PlxCm for working with these devices.<br>
<br>
The PDE GUI is designed to work only with PLX PCIe switches (PCIe
85xx/86xx/87xx/97xx).&nbsp; PDE used in accordance with legacy devices is not
supported.&nbsp; PLXMon/PlxCm may be used with any PCI/PCIe device, but do not
include some PDE-specific features, such as register-level descriptions from
the datasheet.</p>

<h2><a name="_Compatibility_with_Newer"></a>6.<span style='font-size:7.0pt;
font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp; </span>Compatibility
with Newer Versions of Microsoft Visual Studio &amp; Managed Code</h2>

<p class=MsoBodyTextIndent>The Windows sample applications and API library are
built with Microsoft Visual C++ v6.0, Service Pack 6.&nbsp; Microsoft’s newer
Visual Studio (e.g. 2005/2008) includes newer versions of Visual C++.&nbsp; The
project files shipped with the PLX SDK are completely compatible with newer
versions after a simple conversion process.&nbsp; When a project file is
opened, Visual Studio will display a warning that the project is from a
previous version and will provide an option to update the project file.&nbsp;
The conversion only needs to be performed once for each project file.&nbsp; The
projects will then be fully compatible with the newer version and should open
without a warning message.&nbsp; Starting with PLX SDK v7.0, VS 2005 Solution
files are also provided for sample applications.</p>

<p class=MsoBodyTextIndent><b><i>Note</i></b><i>: Visual Studio project files
are not backwards compatible with previous versions.&nbsp; A project, which was
converted to or created with the Visual Studio 2005, for example, cannot be
opened in Visual Studio v6.0.</i></p>

<p class=MsoBodyTextIndent>Although PLX does not support Managed Code, there
are techniques available which allow calling of PLX API DLL functions.&nbsp;
The two techniques are published by Microsoft.&nbsp; At the time of this
writing, this was located under:</p>

<p class=MsoBodyTextIndent><a
href="http://msdn2.microsoft.com/en-us/library/ms235282" target="_blank">http://msdn2.microsoft.com/en-us/library/ms235282</a></p>

<h2><a name="_PLX_SDK_Compatibility_2"></a><a
name="_Manufacturing_Test_Utility_1"></a><a name="_PLX_Drivers_and"></a><a
name="_PLX_Drivers_and_1"></a><a name="_PLX_Drivers_and_2"></a>7.<span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;
</span>PCI/PCIe SDK Drivers and the 9050 BAR Errata</h2>

<p class=MsoBodyTextIndent>Due to a 9050 chip erratum, if a PC boots and the
9050 PCI BAR 0 is assigned a PCI address in which bit 7 is set, the PLX driver
(and PLXMon) will not be able to access the 9050 internal registers or the
EEPROM.&nbsp; An example of this is the address 0xffebc080.&nbsp; PlxMon will
display all internal registers as FFFF_FFFF.</p>

<p class=MsoBodyTextIndent>This erratum does not exist on the 9052.</p>

<h2><a name="_Virtual_Mapping_of"></a><a name="_9.__Increase"></a><a
name="_9.__"></a>8.<span style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;
</span>Increase Host CPU Write (“Direct Slave”) Performance to PLX 9000 &amp;
8000 BAR Spaces</h2>

<p class=MsoBodyTextIndent>When the Host CPU performs reads or writes from a
PCI BAR space, this is called a “Direct Slave” operation.&nbsp; On most
chipsets, the host bridge/Root Complex will not allow any sort of burst/large
TLP payload for these operations.&nbsp; As a result, performance has
traditionally been relatively poor for these types of transactions.&nbsp; This
is not a limitation of the PLX device, but of the chipset and is a known
industry standard in PCI and PCI Express.</p>

<p class=MsoBodyTextIndent>After some investigation, PLX was able to achieve
significant Direct Slave write performance increases, but only in
Windows.&nbsp; Burst writes/large TLP payload will only occur in specific
situations.&nbsp; First, the CPU must post write data quickly enough to the
host bridge so that it can buffer enough to send out in a large chunk.&nbsp;
Second, write-combining must be enabled for that specific region.</p>

<p class=MsoBodyTextIndent>In SDK versions prior to v5.0, when the PLX Windows
driver mapped a PCI BAR to kernel or user space, the mapping was always
specified as non-cacheable (<i>MmNonCached</i>).&nbsp; To support CPU to PCI
BAR space burst writes, the PLX driver is now able to map the space as
Write-combinable (<i>MmWriteCombined</i>), which usually results in a
significant increase in write performance.&nbsp; <b><i><span style='color:red'>The
PLX driver will enable write-combining for a PCI BAR space if the space is
configured as pre-fetchable</span></i></b>.&nbsp; For PLX devices, this is
typically specified in the Space Range register in the EEPROM.</p>

<p class=MsoBodyTextIndent><b><i><br>
Notes</i></b><i>:&nbsp; If write combining is enabled, however, issues could
arise in certain cases.&nbsp; In some instances, multiple writes to the same
location by the CPU may internally be combined into a single write on the
bus.&nbsp; This could result in undesired behavior, for example, if a sequence
of specific write values were intended to trigger a hardware device or were
destined for a FIFO port.</i></p>

<p class=MsoBodyTextIndent><i>Direct Slave read burst is not achievable by any
known methods.&nbsp; Some increase is possible by using x86 assembly code to
read to special x86 SSE large registers (64-bit or higher).&nbsp; This is not
supported by PLX.&nbsp; If greater performance is needed, a PLX device with a
DMA engine is recommended to overcome these limitations.</i></p>

<p class=MsoBodyTextIndent><i>The notable increase in performance was only
noticed in Windows, but not in Linux.&nbsp; Linux does support a similar
feature in newer kernels, but the PLX SDK drivers do not yet support
this.&nbsp; In Linux, you may manually enable write-combining in MTRRs for a
specific region.&nbsp; Refer to the Linux kernel documentation (<a
href="http://www.mjmwired.net/kernel/Documentation/mtrr.txt" target="_blank">http://www.mjmwired.net/kernel/Documentation/mtrr.txt</a>).&nbsp;
A future version of the PLX SDK may support this feature by either using <b>mtrr_add()</b>
or <b>iorema_wc()</b> kernel functions.</i></p>

<h2><a name="_PLX_SDK_Compatibility"></a><a name="_PLX_Windows_Drivers"></a><a
name="_PLXMon_Does_Not"></a><a name="_Increased_Direct_Slave_1"></a><a
name="_CHANGES_IN_SDK"></a><a name="_Working_with_the"></a><a
name="_PEX_Device_Editor"></a>9.<span style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;
</span>Working with the Generic Local-to-PCI Interrupt (LINT) or GPIO
Interrupts</h2>

<p class=MsoBodyTextIndent>The PLX PCI 9000 series chips all contain at least
one generic local-to-PCI interrupt, which is related to the LINT# pin.&nbsp;
Since this interrupt is generic and is triggered based on the OEM design, the
generic PLX SDK drivers do not “know” how to clear the true source of the
interrupt.&nbsp; For example, clearing the interrupt source may require a write
to a specific local bus address.&nbsp; As a result, the PLX Windows and Linux
drivers simply disable/mask the interrupt if it is active.&nbsp; Without this,
the interrupt will continue to remain active and the OS will continuously call
the PLX driver’s Interrupt Service Routine (ISR), which will hang the system
since the ISR pre-empts all other tasks.</p>

<p class=MsoBodyTextIndent>With this in mind, there are 2 options when the
local-to-PCI interrupt is used:</p>

<p class=MsoBodyTextIndent style='margin-left:87.0pt;text-indent:-24.0pt'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>By the time the application is notified of the interrupt (i.e. return
from <i>PlxPci_NotificationWait</i>), the PLX driver ISR will have already
received it and disabled/masked it.&nbsp; After interrupt notification, the
application must <b><i>always</i></b> re-enable the interrupt, but only <b><i>after</i></b>
it has cleared the source of the interrupt.&nbsp; Without the re-enable, the
interrupt will remain disabled/masked.</p>

<p class=MsoBodyTextIndent style='margin-left:87.0pt;text-indent:-24.0pt'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Modify the PLX driver to clear the true source of the interrupt.&nbsp;
Typically, this would be done in the <i>DpcForIsr</i> routine in the file <i>PlxSdk\[Windows
or Linux]\Driver\Source.9000\PlxChip\&lt;Plx_Chip_Type&gt;\PlxInterrupt.c</i>.&nbsp;
If this option were selected, the interrupt source would be cleared, so
disabling/masking it will no longer be necessary.&nbsp; Note that this
modification will make the PLX driver non-generic since it will contain OEM
hardware-dependent code.</p>

<h2><a name="_Using_the_PLX"></a>10.<span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp; </span>Using the PCI/PCIe SDK API Statically
Instead of as a Dynamic Link Library (DLL)</h2>

<p class=MsoBodyTextIndent>In the Windows environment, the PLX SDK API library
is designed for use as a DLL (e.g. <i>PlxApi50.dll</i>).&nbsp; If the file <b><i>PlxApi.c</i></b>
is included statically in a project, rather than calling it as a LIB that loads
the API DLL, access violation exceptions could occur. The reason for the access
violations is due to the required initialization that must occur before the PLX
API is used.&nbsp; When Windows loads a DLL, it automatically calls the
function <i>DllMain()</i>.&nbsp; Referring to this function in <i>PlxApi.c</i>
will demonstrate the initialization that needs to happen.&nbsp; When <i>PlxApi.c</i>
is included statically, the function <i>DllMain</i> does not get called, so the
required initialization does not occur, resulting in eventual access violation
exceptions.</p>

<p class=MsoBodyTextIndent>The solution for this is to either, include the API
LIB file (e.g. <i>PlxApi50.lib)</i> and have Windows load the DLL or, the
application must explicitly call <i>DllMain</i> or equivalent to force the
necessary initialization before the application calls any of the PLX API
functions.<a name="_12.__Calling"></a></p>

<h2><a name="_Vista-64_not_supported"></a><a name="_PLX_Digitally_Signed"></a>11.<span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp; </span>PCI/PCIe
SDK Digitally Signed Windows Drivers</h2>

<p class=MsoBodyTextIndent><i>[Applies to Windows versions up to Windows
7/Server 2008]</i>.&nbsp; Starting with PLX SDK v6.0, all PLX Windows driver
binaries (.SYS files) are digitally signed by PLX.&nbsp; 64-bit versions of
Windows will not load a driver unless it is digitally signed.&nbsp; PLX has
implemented signing of only the driver binaries to allow customers to easily
use PLX drivers with their own products.&nbsp; Windows will still issue a
warning message before loading PLX drivers, but the driver will load properly.</p>

<p class=MsoBodyTextIndent><i>[Windows 8/Server 2012 &amp; newer]</i> The
introduction of Windows 8/Server 2012 resulted in greater restrictions for
driver loading in default configuration.&nbsp; Driver packages must now provide
a digitally signed CATalog file or Windows will refuse to load the
driver.&nbsp; There are ways to override this setting (eg F8 Menu during boot
or driver install options in system global policy), but PLX does not have the
authority to modify these on end-user systems.</p>

<p class=MsoBodyTextIndent>Starting with PLX SDK v7.0, PLX provides a
PLX-digitally signed SDK CATalog file, which allows PLX drivers to load in
Windows 8/10.&nbsp; <i><span style='color:red'>Unfortunately, any modification
to the SDK INF file (previously allowed), will invalidate the CATalog digital
signature &amp; Windows will no longer load the driver</span></i>. At this
time, customers that need to ship PLX drivers with Windows 8+ support must
obtain a Kernel Mode Code Signing certificate for their company &amp; digitally
sign custom INF/CAT files.</p>

<p class=MsoBodyTextIndent>Even when Windows allows PLX driver loading, Windows
will still prompt the user with a warning regarding PLX certificate.&nbsp; This
warning is standard for any device package that has not passed through Windows
WHQL, in which case Microsoft adds its own digital signature.&nbsp; PLX SDK
drivers are not submitted to WHQL because the drivers are generic &amp; not
tied to any particular card.&nbsp; To remove all warning messages, a driver
package must be submitted for WHQL.&nbsp; Customers are free to create their
own digitally signed installation packages for WHQL submission.</p>

<p class=MsoBodyTextIndent><b><i>NOTE</i></b>: If a PLX driver is rebuilt, it
will no longer contain the digital signature and, therefore, will not load in
newer Windows versions.&nbsp; For customers that must modify &amp; rebuild PLX
drivers, you must obtain your own digital certificate and sign the custom-built
driver.&nbsp; Microsoft on-line documentation explains the procedure for driver
signing.&nbsp; This is not supported by PLX but you may refer to the PLX <b><i>BuildDriver.bat</i></b>
file in the PLX SDK that PLX uses to build &amp; digitally sign drivers.</p>

<h2><a name="_Issue_with_Legacy"></a><a name="_64-bit_OS_support"></a>12.<span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp; </span>Windows
IA64 is not supported</h2>

<p class=MsoBodyTextIndent style='text-indent:.5pt'>PLX 64-bit Windows drivers
are only tested on standard x86 CPUs that support 64-bit (i.e. Core 2 Duo,
Xeon, AMD64, etc). PLX drivers are not tested on Intel Architecture 64 (IA64)
platforms and IA64 is, therefore, not supported.</p>

<h2><a name="_13.__Access"></a>13.<span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp; </span>Access to PCIe Extended Configuration
Space on UEFI Systems via Windows PCI/PCIe Service driver</h2>

<p class=MsoBodyTextIndent style='text-indent:.5pt'>The Windows version of the
PCI/PCIe Service driver relies on locating the PCIe Enhanced Configuration
Access Mechanism (ECAM) base address in order to access PCIe configuration
space offsets 100h+.&nbsp; Since Windows does not easily provide a way for a
service-type driver to obtain this information, the service driver manually
probes ACPI tables in system ROM to find the address.&nbsp; On UEFI BIOS
systems, however, the required tables for ACPI probe are not present,
preventing the service driver from accessing PCIe extended registers.</p>

<p class=MsoBodyTextIndent style='text-indent:.5pt'>Starting with SDK v8.0,
when the service driver is unable to locate the ACPI tables, it will then, if
enabled, perform a manual probe of system memory space to locate the
ECAM.&nbsp; This presents a risk, however, because on some systems, access of
specific regions may result in an exception and halt the system.&nbsp; In SDK
8.10, the algorithm was modified to search in reverse order and also allow the
user to control the address range for the driver to search.&nbsp; These are
registry options and the Driver Wizard may be used to modify them.&nbsp; These
changes minimize the risk of a system crash.</p>

<p class=MsoBodyTextIndent style='text-indent:.5pt'>The manual ECAM probe is
disabled by default by the SDK installer to avoid potential crashes.&nbsp; On
UEFI systems, if a user requires access to PCIe extended registers, the ECAM
probe option must be enabled manually.&nbsp; The recommended procedure below
should be followed:</p>

<p class=MsoBodyTextIndent style='margin-left:81.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>System
may crash, so ensure nothing critical is running</p>

<p class=MsoBodyTextIndent style='margin-left:81.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Launch
Driver Wizard and disable the PCI Service Driver “<b>Launch driver when Windows
start</b>” option</p>

<p class=MsoBodyTextIndent style='margin-left:81.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Enable
“<b>Allow manual ECAM probe</b>” option</p>

<p class=MsoBodyTextIndent style='margin-left:81.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>For
the address ranges, start in the upper area, such as F0000000h -&gt; FC000000h.</p>

<p class=MsoBodyTextIndent style='margin-left:81.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Click
“Start Driver”</p>

<p class=MsoBodyTextIndent style='margin-left:117.5pt;text-indent:-.25in'><span
style='font-family:"Courier New"'>o</span><span style='font-size:7.0pt;
font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp; </span>If the system
crashes, repeat the steps but avoid the previous memory region and click “Start
Driver” again</p>

<p class=MsoBodyTextIndent style='margin-left:117.5pt;text-indent:-.25in'><span
style='font-family:"Courier New"'>o</span><span style='font-size:7.0pt;
font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp; </span>If the driver
loads ok, run PlxCm and select a PCI Express device (port number will be
listed) and type ‘<b>pcr 100</b>’ to attempt a read of offset 100h. If a value
other than FFFFFFFF is displayed, the driver was able to locate the ECAM and
the access worked. If not, try a different address range, Stop/Start the
driver, and try the register read again.</p>

<p class=MsoBodyTextIndent style='margin-left:81.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Once
the driver and PCIe accesses are working properly, the driver may be enabled to
auto-start with Windows.&nbsp; It will refer to the registry for the last set
of options to use the next time it loads.</p>

<p class=MsoBodyTextIndent>NOTE: The service driver will usually locate the
ECAM using the default range without a crash.&nbsp; System crashes typically
occur only on a small number of systems.&nbsp; For more details about the service
driver behavior and location of the ECAM, refer to the included <b>PCI/PCIe SDK
General FAQ</b> document for capturing kernel driver debug output.</p>

<div style='margin-left:5.75pt'>

<div style='border-top:solid white 6.0pt;border-left:solid white 1.0pt;
border-bottom:solid white 1.0pt;border-right:none;padding:3.0pt 0in 3.0pt 3.0pt'>

<h1>SDK Changes</h1>

</div>

</div>

<h2><a name="_Building_PLX_WDM"></a><a name="_Windows_Support_for"></a><a
name="_Windows_98/Me_Support"></a><a name="_1._Support_for"></a><a
name="_SDK_4.40"></a><a name="_SDK_4.50"></a><a name="_SDK_5.00"></a><a
name="_PLX_SDK_5.00"></a><a name="_PLX_SDK_5.10"></a><a name="_PLX_SDK_5.20"></a><a
name="_PLX_SDK_5.21"></a><a name="_PLX_SDK_5.22"></a><a name="_PLX_SDK_6.0"></a><a
name="_PLX_SDK_6.10"></a><a name="_PLX_SDK_6.20"></a><a name="_PLX_SDK_6.30"></a><a
name="_PLX_SDK_6.40"></a><a name="_PLX_SDK_6.41"></a><a name="_PLX_SDK_6.50"></a><a
name="_PLX_SDK_7.00"></a><a name="_PLX_SDK_7.20"></a><a name="_PLX_SDK_7.30"></a><a
name="_PLX_SDK_7.24"></a><a name="_PLX_SDK_7.25"></a><a name="_PCI/PCIe_SDK_8.0"></a>
</h2>

<h2><a name="_PCI/PCIe_SDK_9.00"></a>PCI/PCIe SDK 9.00</h2>

<p class=MsoBodyTextIndent style='margin-left:.75in;text-indent:-.25in'><a
name="_PLX_SDK_7.25_1"></a><span style='font-family:Symbol'>·</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><i>Windows Drivers</i></p>

<p class=MsoBodyTextIndent style='margin-left:1.25in;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i>Added Support
 for PEX 89000 Devices</i></p>

<p class=MsoBodyTextIndent style='margin-left:.75in;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i>Linux
Drivers</i></p>

<p class=MsoBodyTextIndent style='margin-left:1.25in;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i>Added Support
 for PEX 89000 Devices</i></p>

<p class=MsoBodyTextIndent style='margin-left:.75in;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i>API</i></p>

<p class=MsoBodyTextIndent style='margin-left:1.25in;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i>API Changes 
 to Support PEX 89000 Devices</i></p>

<p class=MsoBodyTextIndent style='margin-left:56.25pt;text-indent:-20.25pt'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><i>PlxCm</i></p>

<p class=MsoBodyTextIndent style='margin-left:1.25in;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i>API Changes
 to Support PEX 89000 Devices</i></p>

<h2><a name="_PCI/PCIe_SDK_8.30"></a>PCI/PCIe SDK 8.30</h2>
<p class=MsoBodyTextIndent style='margin-left:56.25pt;text-indent:-20.25pt'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Linux Drivers</p>

<p class=MsoBodyTextIndent style='margin-left:1.25in;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i>Fix
compilation on 5.0 and later kernels.</i></p>

<h2><a name="_PCI/PCIe_SDK_8.23"></a>PCI/PCIe SDK 8.23</h2>
<p class=MsoBodyTextIndent style='margin-left:56.25pt;text-indent:-20.25pt'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Windows Drivers</p>

<p class=MsoBodyTextIndent style='margin-left:1.25in;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i>PCI/PCIe
Service driver binaries for Windows 10 x64 and later versions is Digitally
signed by Microsoft by way of Attestation signing to support Secure boot
enabled environments.</i></p>

<h2><a name="_PCI/PCIe_SDK_8.10"></a>PCI/PCIe SDK 8.10</h2>
<p class=MsoBodyTextIndent style='margin-left:56.25pt;text-indent:-20.25pt'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><i>API</i></p>

<p class=MsoBodyTextIndent style='margin-left:1.25in;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i>Updated
support for Aardvark I2C API v5.40. This is required for newer Aardvark USB
drivers (v2.16+ for Win7,8 &amp; v3.0+ for Win10).</i></p>

<p class=MsoBodyTextIndent style='margin-left:1.25in;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i>Added
SPI flash API calls to read/write/erase flash</i></p>

<p class=MsoBodyTextIndent style='margin-left:1.25in;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i>Additional
enhancements to Serial Debug Port (SDB) support for PEX 88000 devices. All
devices now reported, including internal upstream/downstream, MPT, GEP, etc.</i></p>

<p class=MsoBodyTextIndent style='margin-left:56.25pt;text-indent:-20.25pt'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><i>PlxCm</i></p>

<p class=MsoBodyTextIndent style='margin-left:1.25in;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i>Added
SPI commands to read/write/erase SPI flash</i></p>

<p class=MsoBodyTextIndent style='margin-left:56.25pt;text-indent:-20.25pt'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Windows Drivers</p>

<p class=MsoBodyTextIndent style='margin-left:1.25in;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i>PCI/PCIe
Service driver supports new registry options to control manual ECAM probe
address range to avoid potential system crash. Driver Wizard updated to support
the new options.&nbsp; Manual ECAM probe is disabled by default.</i></p>

<p class=MsoBodyTextIndent style='margin-left:1.25in;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i>Include
a proprietary <b>BrcmSC.exe</b> utility which implements a subset of features
of the default System Control (<b>SC.exe</b>) utility provided by Microsoft.
Windows PE, however, does not ship with SC.exe, so the provided BrcmSC.exe may
be used in its place to install and control the PCIe Service driver.</i></p>

<h2><a name="_PCI/PCIe_SDK_8.0_1"></a>PCI/PCIe SDK 8.0</h2>

<p class=MsoBodyTextIndent style='margin-left:.75in;text-indent:-.25in'><a
name="_PLX_SDK_7.25_1"></a><span style='font-family:Symbol'>·</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><i>Windows Drivers</i></p>

<p class=MsoBodyTextIndent style='margin-left:1.25in;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i>PCI/PCIe
Service driver now supports a manual probe for PCIe ECAM, which is invoked on
UEFI systems so that the driver is able to support access to PCI config
registers 100h+</i></p>

<p class=MsoBodyTextIndent style='margin-left:.75in;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i>Linux
Drivers</i></p>

<p class=MsoBodyTextIndent style='margin-left:1.25in;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i>Updated
to support recent kernels (3.x, 4.x, 5.x)</i></p>

<p class=MsoBodyTextIndent style='margin-left:1.25in;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i>PCI/PCIe
Service driver now ensures all PLX/Broadcom switch ports are in D0 power state.
In some cases, newer Linux kernels are putting the ports into low power D3
state which prevents access to downstream device registers, making debug
difficult.</i></p>

<p class=MsoBodyTextIndent style='margin-left:.75in;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i>API</i></p>

<p class=MsoBodyTextIndent style='margin-left:1.25in;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i>Fixed
issue with <b>PlxPci_DeviceFind()</b> not returning devices on bus FFh</i></p>

<p class=MsoBodyTextIndent style='margin-left:1.25in;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i>Add
Serial Debug Port (SDB) and MDIO access native API support for PEX 88000
devices</i></p>

<p class=MsoBodyTextIndent style='margin-left:1.25in;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i>Add
native API support for I2C for PEX 88000 devices</i></p>

<h2>PLX SDK 7.25<span style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></h2>

<p class=MsoBodyTextIndent style='margin-left:.75in;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i>Linux
Drivers</i></p>

<p class=MsoBodyTextIndent style='margin-left:1.25in;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Fixed
kernel crash when the API calls <b><i>PlxPci_IoPortRead</i></b>, <b>PlxPci_IoPortWrite</b>,
<b>PlxPci_PerformanceInitializeProperties</b>, <b>PlxPci_PerformanceGetCounters</b>.&nbsp;
This occurred on kernels that support <b>Supervisor Mode Access Prevention
(SMAP)</b>. PLX drivers, in the mentioned API calls, were directly accessing
the passed-in user-mode buffer rather than using kernel <b>copy_to_user()</b>/<b>copy_from_user()</b>
calls.&nbsp; SMAP support was added in kernel 3.7 and automatically enabled for
hardware that supports it.&nbsp; It can be manually disabled via the kernel
parameter <b><i>nosmap</i></b>.</p>

<p class=MsoBodyTextIndent style='margin-left:.75in;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i>Windows
Drivers</i></p>

<p class=MsoBodyTextIndent style='margin-left:1.25in;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i>Added
detection of Windows 10</i></p>

<p class=MsoBodyTextIndent style='margin-left:1.25in;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i>Updated
drivers to set additional No-execute flags for calls to <b>ExAllocatePoolXxx()</b>
and <b>MmMapMdlXxx()</b> functions. These were newly added starting with
Windows 8. The additional flags are only used in the calls if the OS is Win8 or
higher to preserve backward compatibility. Refer to <b>NonPagedPoolNx</b> &amp;
<b>MdlMappingNoExecute</b>.</i></p>

<p class=MsoBodyTextIndent style='margin-left:1.25in;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i>Fixed
issue with Power Management during lowering of device power state. The IRP
status was being returned as STATUS_PENDING even though no further processing
was needed.</i></p>

<p class=MsoBodyTextIndent style='margin-left:1.25in;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i>Fixed
blue screen issue for legacy 9000 series in Windows 10. Issue occurs on resume
from hibernate or when booting normally if Fast Boot Mode is enabled. PLX
drivers were calling an OS delay function to allow chips a small amount of time
to complete reset &amp; reload EEPROM. The delay function causes an issue on
Windows 10, so it was replaced with multiple benign chip register reads to
emulate the delay.</i></p>

<h2><a name="_PLX_SDK_7.24_1"></a>PLX SDK 7.24</h2>

<p class=MsoBodyTextIndent style='margin-left:56.25pt;text-indent:-20.25pt'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><i>PLX 8000 NT Windows Driver</i></p>

<p class=MsoBodyTextIndent style='margin-left:1.25in;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i>Added
support for 9700 series Non-Transparent endpoint</i></p>

<p class=MsoBodyTextIndent style='margin-left:1.25in;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i>Updated
NT LUT add API to support newer LUT index access method Capella-1 &amp; 2
devices</i></p>

<h2><a name="_PLX_SDK_7.20_1"></a><a name="_PLX_SDK_7.23"></a>PLX SDK 7.23</h2>

<p class=MsoBodyTextIndent style='margin-left:.75in;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><i>PLX Service
Driver</i></p>

<p class=MsoBodyTextIndent style='margin-left:1.25in;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i>Corrected
port offset adjustment for switch upstream &amp; downstream ports, which
affected the <b>PlxPci_PlxRegsiterRead/Write()</b> API calls.</i></p>

<p class=MsoBodyTextIndent style='margin-left:.75in;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><i>PLX 8000 NT
Windows Driver</i></p>

<p class=MsoBodyTextIndent style='margin-left:1.25in;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i>Fixed
driver load crash. In some cases, the driver attempts to access BAR 0 before it
was mapped to kernel space.</i></p>

<p class=MsoBodyTextIndent style='margin-left:.75in;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><i>Updates to
support newer Linux kernels 3.x &amp; 4.x</i></p>

<p class=MsoBodyTextIndent style='margin-left:49.5pt;text-indent:-13.5pt'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><b><i>Bugs
Fixed</i></b></p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:1.25in;text-indent:-.25in'><span style='font-family:Symbol'>·</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span style='font-family:"Courier New"'>o</span><span style='font-size:
7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp; </span><i>[PLX
Windows 8000 NT Driver] Driver crashes system on initial load due to access
violation <br>
</i>The 8000 NT driver, during initialization, probes the device to determine additional
information. This probe involves access of PLX-specific registers within the
BAR0 space.&nbsp; The 8000 NT driver, however, attempted to access registers
before BAR0 is mapped to kernel space, resulting in an access violation error
&amp; crashes the system.<br>
<br>
Affected files:&nbsp;&nbsp; <i>PlxSdk\Driver\Source.Plx8000_NT\Driver.c</i></p>

<h2>PLX SDK 7.20</h2>

<p class=MsoBodyTextIndent style='margin-left:63.0pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i>PLX
API</i></p>

<p class=MsoBodyTextIndent style='margin-left:85.5pt;text-indent:-.25in'><span
style='font-family:"Courier New"'>o</span><span style='font-size:7.0pt;
font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp; </span>Changed ApiXXX
return codes to new PLX_STATUS_XXX codes. <i>Refer to <b>PlxSdk/Include/PlxStat.h</b></i>.</p>

<p class=MsoBodyTextIndent style='margin-left:63.0pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i>PEX
Device Editor (PDE) GUI</i></p>

<p class=MsoBodyTextIndent style='margin-left:85.5pt;text-indent:-.25in'><span
style='font-family:"Courier New"'>o</span><span style='font-size:7.0pt;
font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp; </span>Added support for
9700 series</p>

<p class=MsoBodyTextIndent style='margin-left:85.5pt;text-indent:-.25in'><span
style='font-family:"Courier New"'>o</span><span style='font-size:7.0pt;
font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp; </span>Various bug
fixes &amp; enhancements</p>

<p class=MsoBodyTextIndent style='margin-left:63.0pt;text-indent:-13.5pt'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i>GenMon
(Performance Monitor &amp; Packet Generator)</i></p>

<p class=MsoBodyTextIndent style='margin-left:85.5pt;text-indent:-.25in'><span
style='font-family:"Courier New"'>o</span><span style='font-size:7.0pt;
font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp; </span>Added support
for 9700 series &amp; recent 8700 series not previously supported</p>

<p class=MsoBodyTextIndent style='margin-left:85.5pt;text-indent:-.25in'><span
style='font-family:"Courier New"'>o</span><span style='font-size:7.0pt;
font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp; </span>Revised
interface to separate device list from packet generator dialog</p>

<p class=MsoBodyTextIndent style='margin-left:63.0pt;text-indent:-13.5pt'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i>PLX Service
Driver for Windows</i></p>

<p class=MsoBodyTextIndent style='margin-left:85.5pt;text-indent:-.25in'><span
style='font-family:"Courier New"'>o</span><span style='font-size:7.0pt;
font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp; </span>Added option
to disable probe for the size of a non-PLX device’s BAR spaces to avoid issues
if device is in-use</p>

<h2><a name="_PLX_SDK_7.10"></a>PLX SDK 7.10</h2>

<p class=MsoBodyTextIndent style='margin-left:63.0pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i>[PEX
Device Editor (PDE) GUI]</i> Bug fixes &amp; enhancements:</p>

<p class=MsoBodyTextIndent style='margin-left:85.5pt;text-indent:-.25in'><span
style='font-family:"Courier New"'>o</span><span style='font-size:7.0pt;
font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp; </span>Updated
Databook register table information for Capella-1 devices – 8796, 8780, 8764,
8750, 8718</p>

<p class=MsoBodyTextIndent style='margin-left:85.5pt;text-indent:-.25in'><span
style='font-family:"Courier New"'>o</span><span style='font-size:7.0pt;
font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp; </span>Changed the
PDE exe to prompt for admin password if running as an ordinary user.</p>

<p class=MsoBodyTextIndent style='margin-left:85.5pt;text-indent:-.25in'><span
style='font-family:"Courier New"'>o</span><span style='font-size:7.0pt;
font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp; </span>Fixed issue
with high CPU usage, even when PDE was idle.</p>

<p class=MsoBodyTextIndent style='margin-left:85.5pt;text-indent:-.25in'><span
style='font-family:"Courier New"'>o</span><span style='font-size:7.0pt;
font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp; </span>Fixed memory leak,
which caused PDE to become sluggish when opening too many screens.</p>

<p class=MsoBodyTextIndent style='margin-left:85.5pt;text-indent:-.25in'><span
style='font-family:"Courier New"'>o</span><span style='font-size:7.0pt;
font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp; </span>Fixed problem
with time scale in Serdes Eye.</p>

<p class=MsoBodyTextIndent style='margin-left:85.5pt;text-indent:-.25in'><span
style='font-family:"Courier New"'>o</span><span style='font-size:7.0pt;
font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp; </span>Fixed issue
with Serdes eye not working on stations other than station 0.</p>

<p class=MsoBodyTextIndent style='margin-left:85.5pt;text-indent:-.25in'><span
style='font-family:"Courier New"'>o</span><span style='font-size:7.0pt;
font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp; </span>Improved
Serdes eye gradient plot.</p>

<p class=MsoBodyTextIndent style='margin-left:85.5pt;text-indent:-.25in'><span
style='font-family:"Courier New"'>o</span><span style='font-size:7.0pt;
font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp; </span>Fixed problem
with Far end value in TxEq status.</p>

<p class=MsoBodyTextIndent style='margin-left:85.5pt;text-indent:-.25in'><span
style='font-family:"Courier New"'>o</span><span style='font-size:7.0pt;
font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp; </span>Added a filter
to EEPROM browse dialog to filter entries by device ID.</p>

<p class=MsoBodyTextIndent style='margin-left:85.5pt;text-indent:-.25in'><span
style='font-family:"Courier New"'>o</span><span style='font-size:7.0pt;
font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp; </span>Added a
checkbox to switch between local host or remote machine in Find Devices screen.</p>

<p class=MsoBodyTextIndent style='margin-left:85.5pt;text-indent:-.25in'><span
style='font-family:"Courier New"'>o</span><span style='font-size:7.0pt;
font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp; </span>Added extra space
in System Tree View to prevent the tree from getting chopped.</p>

<p class=MsoBodyTextIndent style='margin-left:85.5pt;text-indent:-.25in'><span
style='font-family:"Courier New"'>o</span><span style='font-size:7.0pt;
font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp; </span>Fixed problem
with Error/Warning dialogs blocking the GUI in some cases.</p>

<p class=MsoBodyTextIndent style='margin-left:85.5pt;text-indent:-.25in'><span
style='font-family:"Courier New"'>o</span><span style='font-size:7.0pt;
font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp; </span>Corrected
formatting in probe mode output file</p>

<p class=MsoBodyTextIndent style='margin-left:85.5pt;text-indent:-.25in'><span
style='font-family:"Courier New"'>o</span><span style='font-size:7.0pt;
font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp; </span>Corrected
warning message shown if PDE is not able to open probe mode output file.</p>

<p class=MsoBodyTextIndent style='margin-left:63.0pt;text-indent:-13.5pt'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><b><i>Bugs
Fixed</i></b></p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:85.5pt;text-indent:-.25in'><span style='font-family:"Courier New"'>o</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;
</span><i>[PLX Drivers] 8114 EEPROM Accesses to offsets 256B(100h) &amp; higher
<br>
</i>Since the 8114 doesn’t report EEPROM byte addressing in 206[23:22], PLX drivers
were mistakenly defaulting to 1B addressing, which limited accessible
offsets.&nbsp; Default is now 2B, which allows up to 64KB EEPROM access. <br>
<br>
Affected files:&nbsp;&nbsp; <i>PlxSdk\Driver\Source.Plx8000_NT\Eep_8000.c <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
PlxSdk\Driver\Source.PlxSvc\Eep_8000.c<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
PlxSdk\PlxApi\Eep_8000.c</i></p>

<h2><a name="_PLX_SDK_7.00_1"></a>PLX SDK 7.00</h2>

<p class=MsoBodyTextIndent style='margin-left:66.0pt;text-indent:-21.0pt'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Added PLX driver support for Windows 8</p>

<p class=MsoBodyTextIndent style='margin-left:66.0pt;text-indent:-21.0pt'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Added PLX driver support for Linux kernel 3.x.&nbsp; Support for kernel
2.4 has been removed from the PLX SDK.</p>

<p class=MsoBodyTextIndent style='margin-left:66.0pt;text-indent:-21.0pt'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Support for Capella-1 family of Gen3 PLX devices – 8796, 8780, 8764,
8750, 8718</p>

<p class=MsoBodyTextIndent style='margin-left:66.0pt;text-indent:-21.0pt'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><i>[PEX Device Editor (PDE) GUI]</i> Various updates &amp; enhancements:</p>

<p class=MsoBodyTextIndent style='margin-left:85.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>The
PDE has been rewritten in Java so that the same GUI will work under both
Windows &amp; Linux OS</p>

<p class=MsoBodyTextIndent style='margin-left:85.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>The
PDE will prompt for a license file when it starts the first time after
installation. The key is no longer entered during the SDK installation.</p>

<p class=MsoBodyTextIndent style='margin-left:85.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Serdes
Eye detection algorithm has been optimized</p>

<p class=MsoBodyTextIndent style='margin-left:85.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Support
for multiple Aardvark Controllers and cascaded I2C devices</p>

<p class=MsoBodyTextIndent style='margin-left:85.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>EEPROM
Editor enhancements –&nbsp; </p>

<p class=MsoBodyTextIndent style='margin-left:121.5pt;text-indent:-.25in'><span
style='font-family:"Courier New"'>o</span><span style='font-size:7.0pt;
font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp; </span>Addition of
multiple rows at a time</p>

<p class=MsoBodyTextIndent style='margin-left:121.5pt;text-indent:-.25in'><span
style='font-family:"Courier New"'>o</span><span style='font-size:7.0pt;
font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp; </span>Row
duplication (with right click)</p>

<p class=MsoBodyTextIndent style='margin-left:121.5pt;text-indent:-.25in'><span
style='font-family:"Courier New"'>o</span><span style='font-size:7.0pt;
font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp; </span>“<i>Remove All</i>”
option</p>

<p class=MsoBodyTextIndent style='margin-left:85.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Option
to start/stop the remote server process from the GUI. This will release I2C
resources while the GUI is still open and allow other applications to connect
to the I2C device (Will be available in Beta Release)</p>

<p class=MsoBodyTextIndent style='margin-left:85.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Option
to run GUI remotely on a different system from where the PLX Device is physically
located</p>

<p class=MsoBodyTextIndent style='margin-left:66.0pt;text-indent:-21.0pt'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><i>[PLX SDK Installer] </i>The PLX SDK installer will now fully install
&amp; update any existing PLX drivers dynamically.&nbsp; If a PLX compatible
device is installed in the system, the installer will trigger Windows Plug ‘n’
Play system to load/update the driver for the device.&nbsp; During PLX SDK
uninstall, the SDK will unload &amp; uninstall existing SDK drivers. Drivers
are migrated to the Windows DriverStore for future installation. For additional
details, refer to the <a
href="http://msdn.microsoft.com/en-us/library/windows/hardware/ff544842(v=vs.85).aspx"
target="_blank">Microsoft Driver Package Installer (DPInst)</a> documentation,
as this is the tool the PLX SDK installer utilizes.</p>

<p class=MsoBodyTextIndent style='margin-left:66.0pt;text-indent:-21.0pt'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><i>[PLX SDK Directory Structure] </i>The PLX SDK directory structure has
changed slightly.&nbsp; All folders under <b><i>PlxSdk\Windows</i></b> &amp; <b><i>PlxSdk\Linux</i></b>
have been moved up one level.&nbsp; The new directory locations are now <b><i>PlxSdk\Driver</i></b>,
<b><i>PlxSdk\PlxApi</i></b>, <b><i>PlxSdk\Samples</i></b>.</p>

<p class=MsoBodyTextIndent style='margin-left:66.0pt;text-indent:-21.0pt'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><i>[PLX SDK Drivers Renamed]</i> To avoid confusion, some PLX drivers
have been renamed for their respective functions.&nbsp; For example, many
customer assumed the “<b><i>Plx8000</i></b>” driver was for all PLX switches
when, in fact, it is only for the NT Endpoint in supported switches.&nbsp; The
changed drivers are:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><i>Plx8000&nbsp;&nbsp;&nbsp;&nbsp; </i></b><span
style='font-family:Wingdings'>à</span>&nbsp;&nbsp;&nbsp; <b><i>Plx8000_NT</i></b><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><i>PlxDma&nbsp;&nbsp;&nbsp;&nbsp; </i></b><span
style='font-family:Wingdings'>à</span>&nbsp;&nbsp;&nbsp; <b><i>Plx8000_DMA</i></b><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><i>Plx6000&nbsp;&nbsp;&nbsp;&nbsp; </i></b><span
style='font-family:Wingdings'>à</span>&nbsp;&nbsp;&nbsp; <b><i>Plx6000_NT</i></b></p>

<p class=MsoBodyTextIndent style='margin-left:66.0pt;text-indent:-21.0pt'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><i>[PLX 8000 NT Linux Driver]</i> Updated driver to use MSI interrupt
instead of INTx if supported.</p>

<p class=MsoBodyTextIndent style='margin-left:66.0pt;text-indent:-21.0pt'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>[<i>PlxCm</i>] Added ‘<b>/b</b>’ option to the <b><i>eep_load</i></b>
command to bypass data verification during EEPROM loading from a file. This
results in up to 50% performance increase during EEPROM programming, especially
through I2C mode.&nbsp; Note that using this means PlxCm will not perform a
read to verify whether EEPROM data was programmed correctly.<br>
<i>&nbsp; Example: <b>eep_load MyEeprom.bin /b</b></i></p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:66.0pt;text-indent:-21.0pt'><span style='font-family:Symbol'>·</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>[<i>PlxCm</i>] Added ‘<b>dp</b>’ command to dump PCI registers &amp; ‘<b>dr</b>’
command to dump PLX-specific registers mapped behind BAR 0.<br>
<i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Usage:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>dp|dr [Start_offset]
&lt;Byte_Count&gt;</b><br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Examples:&nbsp;&nbsp; <b>dp 0 40</b></i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
- Dump standard PCI config registers 0-3Ch<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<b><i>dp 0 1000</i></b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Dump entire PCI config
space of the selected device<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<b><i>dr 3000 1000</i></b>&nbsp; - Dump all 4KB of port 3 PLX-specific
registers<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<b><i>dr 2FB0 40</i></b>&nbsp;&nbsp;&nbsp;&nbsp; - Dump AER registers of port 2</p>

<p class=MsoBodyTextIndent style='margin-left:66.0pt;text-indent:-21.0pt'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><i>[Windows Samples]</i> Added VS 2005 Solution files so the projects
can be opened with newer versions of MS Visual Studio.</p>

<p class=MsoBodyTextIndent style='margin-left:66.0pt;text-indent:-21.0pt'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><i>[PlxDmaSglNoApi Sample]</i> Updated this sample to support PLX 8000
DMA as well as 9000 DMA. Demonstrates manual SGL DMA setup.</p>

<h2><a name="_PLX_SDK_6.50_1"></a>PLX SDK 6.50</h2>

<p class=MsoBodyTextIndent style='margin-left:66.0pt;text-indent:-21.0pt'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Add support for all Draco &amp; Mira family of PLX devices. </p>

<p class=MsoBodyTextIndent style='margin-left:81.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Draco
– 8749, 8748, 8747, 8733, 8732, 8725, 8724, 8717, 8716, 8713, 8712. </p>

<p class=MsoBodyTextIndent style='margin-left:81.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Mira
– 8605, 8603, 3382, 3380 and 2380.</p>

<p class=MsoBodyTextIndent style='margin-left:67.5pt;text-indent:-22.5pt'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>DMA driver updated to support 8700 DMA.</p>

<p class=MsoBodyTextIndent style='margin-left:67.5pt;text-indent:-22.5pt'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>GenMon (Performance Monitor &amp; Packet Generator) updated to support
8700 </p>

<p class=MsoBodyTextIndent style='margin-left:67.5pt;text-indent:-22.5pt'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Serdes Eye feature is supported for Draco family.<span style='font-size:
7.0pt;font-family:"Times New Roman","serif"'> </span></p>

<p class=MsoBodyTextIndent style='margin-left:67.5pt;text-indent:-22.5pt'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>PDE GUI in Linux is also available as a separate installation.<span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'> </span></p>

<h2><a name="_PLX_SDK_6.41_1"></a><a name="_PLX_SDK_6.42"></a>PLX SDK 6.42</h2>

<p class=MsoBodyTextIndent style='margin-left:.75in;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>This
release includes minor bug fixes and updated Kernel Driver Code Authentication
Certificates.<span style='font-size:7.0pt;font-family:"Times New Roman","serif"'>
</span></p>

<p class=MsoBodyTextIndent style='margin-left:.75in;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><b><i>Bugs
Fixed</i></b></p>

<p class=MsoBodyTextIndent style='margin-left:99.0pt;text-indent:-.25in'><span
style='font-family:"Courier New"'>o</span><span style='font-size:7.0pt;
font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp; </span><i>[PDE]</i> EEPROM
data corruption when programming EEPROM from a file or saving data to a file.
This affected 8508, 8512, 8517, 8518, 8524 &amp; 8532.</p>

<p class=MsoBodyTextIndent style='margin-left:99.0pt;text-indent:-.25in'><span
style='font-family:"Courier New"'>o</span><span style='font-size:7.0pt;
font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp; </span><i>[PDE] </i>Equalization
Status screen for Draco series of devices (8712, 8716, 8724, 8732, 8747, 8748)
had issues when reading certain lanes under different stations.</p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:99.0pt;text-indent:-.25in'><span style='font-family:"Courier New"'>o</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;
</span><i>[PLX Linux Drivers] Updated Dispatch table to use <b>unlocked_ioctl()</b>
instead of <b>ioctl()</b><br>
</i>In the driver dispatch table registration, the function <b><i>ioctl()</i></b>
was officially removed in 2.6.36 and replaced with <b><i>unlocked_ioctl()</i></b>.
PLX drivers were updated to use the new interface. Older kernel versions
requiring the ioctl() interface are still supported through the use of <b>#ifdef</b>’s.<br>
<br>
Refer to <a href="http://lwn.net/Articles/119652" target="_blank">http://lwn.net/Articles/119652</a>
for details.<br>
<br>
Affected files:<br>
<i>&nbsp;&nbsp; PlxSdk\Linux\Driver\Source.&lt;Driver_Name&gt;\Dispatch.c/h<br>
&nbsp;&nbsp; PlxSdk\Linux\Driver\Source.&lt;Driver_Name&gt;\Driver.c</i></p>

<h2><a name="_PLX_SDK_6.41_2"></a>PLX SDK 6.41</h2>

<p class=MsoBodyTextIndent style='margin-left:67.5pt;text-indent:-22.5pt'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>This release includes minor bug fixes and updated data book register tables
for the PDE.</p>

<p class=MsoBodyTextIndent style='margin-left:67.5pt;text-indent:-22.5pt'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><b><i>Bugs Fixed</i></b></p>

<p class=MsoBodyTextIndent style='margin-left:99.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Performance
Monitor counters showed spurious counts and messed up the calculations. Added a
software workaround to ignore spurious counts.</p>

<p class=MsoBodyTextIndent style='margin-left:99.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Serdes
Eye for gen3 devices were not working on lanes that are not in station zero.</p>

<h2><a name="_PLX_SDK_6.40_1"></a>PLX SDK 6.40</h2>

<p class=MsoBodyTextIndent style='margin-left:63.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Added
support for the PLX Scout and Draco family of Gen3 devices – 8700, 8748, 8747,
8732, 8724, 8716, 8712</p>

<p class=MsoBodyTextIndent style='margin-left:63.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>PEX
Device Editor GUI supported on Linux (Separate download will be made available
in Jan 2011)</p>

<p class=MsoBodyTextIndent style='margin-left:63.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>The
PlxCm application command-line was updated to support the use of variables and
simple arithmetic operations.&nbsp; For example, the command ‘dl v0+200’ is now
legal and will read from BAR 0 offset 200h without the user needing to determine
the virtual address.</p>

<p class=MsoBodyTextIndent style='margin-left:63.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Performance
Monitor updated for PLX PCIe Gen3 devices</p>

<p class=MsoBodyTextIndent style='margin-left:63.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Packet
Generator updated for PLX PCIe Gen3 devices</p>

<p class=MsoBodyTextIndent style='margin-left:63.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Following
additions to the PEX Device Editor (PDE) GUI application:</p>

<p class=MsoBodyTextIndent style='margin-left:1.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Special
GUI support for AHB register access</p>

<p class=MsoBodyTextIndent style='margin-left:1.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Compare
register dump text files</p>

<p class=MsoBodyTextIndent style='margin-left:1.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Auto-detection
of Requestor ID in the GUI for setting up Non-Transparent Mode</p>

<p class=MsoBodyTextIndent style='margin-left:1.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Serdes
Eye feature enhancements for Gen3 like Serdes Height, Gradient Plot, Time
estimate etc.</p>

<p class=MsoBodyTextIndent style='margin-left:1.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>”Remove
All” option in Eeprom Editor screen.</p>

<p class=MsoBodyTextIndent style='margin-left:1.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Option
to Clear All errors in the Global error monitoring screen.</p>

<p class=MsoBodyTextIndent style='margin-left:1.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>All
85xx devices can be accessed with a single key.</p>

<p class=MsoBodyTextIndent style='margin-left:1.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Probe
Mode can read an output file in offline mode.</p>

<p class=MsoBodyTextIndent style='margin-left:1.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Probe
Mode output file names can be customized at the time of saving.</p>

<p class=MsoBodyTextIndent style='margin-left:1.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Special
screen to setup Transmit and Receive equalization parameters for Gen3 Serdes.</p>

<p class=MsoBodyTextIndent style='margin-left:63.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Added
a new Sample application that demonstrates fast transfer of data across 2 hosts
connected over NT using DMA</p>

<p class=MsoBodyTextIndent style='margin-left:63.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>The
GenMon Performance Monitor now allows manual re-size of the port statistics
window</p>

<p class=MsoBodyTextIndent style='margin-left:63.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Updated
I2C in the PLX API to utilize the new <b><i>aa_i2c_write_read()</i></b> API
call for reading a register.&nbsp; This requires the latest Aardvark drivers
and firmware.&nbsp; Please refer to “<a href="#_Known_Issues_with_1">PLX SDK
and I2C</a>” for details.&nbsp;</p>

<p class=MsoBodyTextIndent style='margin-left:63.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><b><i>Bugs
Fixed</i></b></p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:81.5pt;text-indent:-.25in'><span style='font-family:Symbol'>·</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><i>[PLX 8000 NT Windows Driver] Driver fails to distinguish between NT
Virtual and Link side<br>
</i>The PLX 8000 NT driver NT Virtual vs. Link detection algorithm was modified
in the previous SDK release to use a new algorithm for detection.&nbsp; The
algorithm involves PCI configuration reads of 3Ch.&nbsp; In some versions of
Windows, the OS returns an internally stored value for 3Ch instead of actually
performing a PCI configuration read.&nbsp; This resulted in incorrect data
received by the PLX driver.<br>
<br>
The fix was to bypass the OS services for the PCI configuration access.&nbsp;
This always results in a PCI configuration read to obtain the correct register
value.<br>
<br>
Affected files:&nbsp;&nbsp;<i>PlxSdk\Window\Driver\Source.Plx8000\PlxChipFn.c </i></p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:81.5pt;text-indent:-.25in'><span style='font-family:Symbol'>·</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><i>[PLX Windows Drivers] Possible OS crash during shutdown in a rare scenario<br>
</i>In some cases, Windows is not able to assign resources to the PLX
device.&nbsp; The PLX driver will get called by the OS to load, but no
IRP_MN_START message will get sent to the driver to inform it of device
resources.&nbsp; As a result, the PLX driver will not have mapped resources,
specifically to BAR 0 for register accesses.&nbsp; Device Manager will usually
report a message like “<i><span style='color:red'>This device cannot find
enough resources that it can use. (Code 12)</span></i>”.&nbsp; Windows then
prompts the user that the system must be rebooted for changes to take effect.<br>
<br>
During a subsequent shutdown or hibernate, Windows sends power down messages to
the PLX driver.&nbsp; Normally, the PLX driver disables interrupts and saves
the device context (i.e. register contents).&nbsp; If the device was not previously
started, registers will not be accessible, but the PLX driver attempted the
access anyway, resulting in a system crash during the shutdown.<br>
<br>
The fix was to bypass the PLX-specific device disable procedure if the device
had not yet been started.<br>
<br>
Affected files:&nbsp;&nbsp;<i>PlxSdk\Window\Driver\Source.Plx&lt;DriverName&gt;\Power.c</i></p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:81.5pt;text-indent:-.25in'><span style='font-family:Symbol'>·</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><i>[PLX Linux Drivers] PLX drivers corrupt reference count in pci_dev
structure<br>
</i>In SDK 6.30, PLX Linux drivers were updated to use the new <b><i>pci_get_*</i></b>
kernel functions instead of the now deprecated <b><i>pci_find_*</i></b>
functions.&nbsp; The new functions update a reference count in the <i>pci_dev</i>
structure each time they are called.&nbsp; As a result, the driver is
responsible for decrementing the count with <b><i>pci_dev_put()</i></b> when it
no longer needs the <i>pci_dev</i> structure.<br>
<br>
When PLX drivers scanned the bus with <b><i>pci_get_device()</i></b>, the
driver was also calling <b><i>pci_dev_put()</i></b> when it no longer needed <i>pci_dev</i>.&nbsp;
In this special case, however, it turns out <b><i>pci_get_device() </i></b>actually
decrements the reference count internally of the <i>dev_from</i>(3<sup>rd</sup>)
parameter.&nbsp; As a result, the PLX driver unnecessarily decremented the
reference count, eventually resulting in a kernel panic.<br>
<br>
The fix involved removing the <b><i>pci_dev_put()</i></b> call in the cases
where <b><i>pci_get_device()</i></b> is used.<br>
<br>
Affected files:&nbsp;&nbsp;<i>PlxSdk\Linux\Driver\Source.PlxSvc\SupptFunc.c<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<i>PlxSdk\Linux\Driver\Source.Plx&lt;DriverName&gt;\Driver.c</i></p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:81.5pt;text-indent:-.25in'><span style='font-family:Symbol'>·</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><i>[PLX Linux Drivers] Corrupt memory page reference count on DMA
cleanup during abnormal termination of app<br>
</i>When an application terminates, the PLX driver performs numerous cleanup
operations.&nbsp; If a DMA is in-progress and was started by the terminating
application, the PLX driver aborts the DMA.&nbsp; In cases where an SGL DMA is
pending (<b><i>PlxPci_TransferUserBuffer()</i></b> called), additional cleanup
is required to unlock and release buffers pages.<br>
<br>
If the app terminates during a long DMA transfer, the DMA abort may trigger a
DMA done interrupt.&nbsp; This, in turn, calls the SGL DMA cleanup
routine.&nbsp; Additionally, the DMA close operation also called the SGL DMA
cleanup.&nbsp; The result is multiple instances of the cleanup routine running
and corrupting the buffer pages reference count.<br>
<br>
The fix involves a short sleep after the DMA close routine aborts the
DMA.&nbsp; This allows time for the DMA interrupt to occur and for the driver
DPC routine to perform SGL cleanup.&nbsp; The DMA close routine will then not
need to perform additional cleanup.<br>
<br>
Affected files:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <i>PlxSdk\Linux\Driver\Source.PlxDma\ApiFunc.c<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PlxSdk\Linux\Driver\Source.Plx9000\Chip\9080\PlxChipApi.c<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PlxSdk\Linux\Driver\Source.Plx9000\Chip\9054\PlxChipApi.c<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PlxSdk\Linux\Driver\Source.Plx9000\Chip\9056\PlxChipApi.c<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PlxSdk\Linux\Driver\Source.Plx9000\Chip\9656\PlxChipApi.c<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PlxSdk\Linux\Driver\Source.Plx9000\Chip\8311\PlxChipApi.c</i></p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:81.5pt;text-indent:-.25in'><span style='font-family:Symbol'>·</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><i>[PLX Linux Drivers] PLX drivers improper use of ISR spin lock for
generic local-to-PCI interrupt <br>
</i>For PLX 9000 series drivers, when the generic Local-to-PCI interrupt is
detected, the PLX driver masks it in the Interrupt Control/Status register in
the DPC routine.&nbsp; To avoid conflicts with the ISR, a spin lock is used.<br>
<br>
The DPC routine used the kernel function <b><i>spin_lock()</i></b>, which
doesn’t save IRQ state.&nbsp; On an SMP system, the DPC could execute at the
same time as another thread modifying the interrupt CSR to enable the
interrupt.&nbsp; This race condition could cause system lockup.<br>
<br>
The fix involved replacing the call to <b><i>spin_lock()</i></b> with <b><i>spin_lock_irqsave()</i></b>,
which correctly saved the IRQ state and prevents corruption.&nbsp;
Additionally, all PLX ISRs were modified to use <b><i>spin_lock() </i></b>instead
of <b><i>spin_lock_irqsave()</i></b>,which results in a slight performance
improvement.&nbsp; Since IRQ state is automatically saved during ISR execution,
there is no need for the PLX driver to save the state again.<br>
<br>
Affected files:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <i>PlxSdk\Linux\Driver\Source.Plx&lt;DriverName&gt;\PlxInterrupt.c
<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PlxSdk\Linux\Driver\Source.Plx9000\&lt;PlxChip&gt;\PlxInterrupt.c</i></p>

<h2><a name="_PLX_SDK_6.30_1"></a>PLX SDK 6.30</h2>

<p class=MsoBodyTextIndent style='margin-left:63.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Added
support for the PLX 8625 and 8636 switches.</p>

<p class=MsoBodyTextIndent style='margin-left:63.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Latest
versions of Sirius and Cygnus databook register tables have been updated in the
PDE GUI application.</p>

<p class=MsoBodyTextIndent style='margin-left:63.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Added
support in the NT kernel drivers for Lane Status Change Interrupts.</p>

<p class=MsoBodyTextIndent style='margin-left:63.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Added
an option in the Serdes Eye screen of PDE GUI to support Lane reversal. This
support is only available for Sirius and Cygnus devices namely - 8619, 8615,
8609, 8618, 8617, 8614, 8613, 8608, 8606, 8604, 8696, 8680, 8664, 8649, 8636
&amp; 8625.</p>

<h2><a name="_PLX_SDK_6.20_"></a>PLX SDK 6.20</h2>

<p class=MsoBodyTextIndent style='margin-left:63.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Added
support for the new multi-root PLX 8600 switches namely 8696, 8680, 8664 and
8649. Over and above the basic features like Eeprom, Memory mapped access &amp;
Config access, this includes support for all Cygnus special features like
Serdes Eye, Performance Monitor, and Multi-root.</p>

<h2><a name="_4.___2"></a>PLX SDK 6.10</h2>

<p class=MsoBodyTextIndent style='margin-left:63.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Added
support for PLX 8600 switches that contain DMA engines namely 8619, 8615, and
8609</p>

<p class=MsoBodyTextIndent style='margin-left:63.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Added
support for the BA revisions of 8618, 8617, 8614, 8613, 8608, 8606, and 8604.</p>

<p class=MsoBodyTextIndent style='margin-left:63.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Added
basic support for Multi-root switch 8696</p>

<p class=MsoBodyTextIndent style='margin-left:63.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Following
additions to the PEX Device Editor (PDE) GUI application:</p>

<p class=MsoBodyTextIndent style='margin-left:81.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Save
data from eeprom diff screen to a text file.</p>

<p class=MsoBodyTextIndent style='margin-left:81.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Dynamic
update of Lane status panel</p>

<p class=MsoBodyTextIndent style='margin-left:81.5pt;text-indent:-.25in'><span
lang=FR style='font-family:Symbol'>·</span><span lang=FR style='font-size:7.0pt;
font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=FR>PCI Capabilities for Non-PLX devices</span></p>

<p class=MsoBodyTextIndent style='margin-left:1.25in;text-indent:-26.5pt'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>I2C
Improvements:</p>

<p class=MsoBodyTextIndent style='margin-left:1.25in;text-indent:-.25in'>-<span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Simplified I2C device search screen</p>

<p class=MsoBodyTextIndent style='margin-left:1.25in;text-indent:-.25in'>-<span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>When PDE is first started it will automatically scan for any I2C devices
connected. If found they will appear in the Device Selector on the left side of
the GUI screen.</p>

<p class=MsoBodyTextIndent style='margin-left:81.5pt;text-indent:-.25in'><span
style='font-family:Symbol'><a
href="http://www.totalphase.com/support/product/aardvark_i2cspi"
title="blocked::http://www.totalphase.com/download/zip/aardvark-firmware-v3.42.zip"><span
style='color:windowtext'>·</span><span style='font-size:7.0pt;font-family:"Times New Roman","serif";
color:windowtext'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
style='font-family:"Arial","sans-serif";color:windowtext'>Global Error detector
and indicator</span></a></span></p>

<p class=MsoBodyTextIndent style='margin-left:81.5pt;text-indent:-.25in'><span
style='font-family:Symbol'><a
href="http://www.totalphase.com/support/product/aardvark_i2cspi"
title="blocked::http://www.totalphase.com/download/zip/aardvark-firmware-v3.42.zip"><span
style='color:windowtext'>·</span><span style='font-size:7.0pt;font-family:"Times New Roman","serif";
color:windowtext'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
style='font-family:"Arial","sans-serif";color:windowtext'>Display all error
registers when needed</span></a></span></p>

<p class=MsoBodyTextIndent style='margin-left:81.5pt;text-indent:-.25in'><span
style='font-family:Symbol'><a
href="http://www.totalphase.com/support/product/aardvark_i2cspi"
title="blocked::http://www.totalphase.com/download/zip/aardvark-firmware-v3.42.zip"><span
style='color:windowtext'>·</span><span style='font-size:7.0pt;font-family:"Times New Roman","serif";
color:windowtext'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
style='font-family:"Arial","sans-serif";color:windowtext'>NT type
(Virtual/Link) in Lane status panel</span></a></span></p>

<p class=MsoBodyTextIndent style='margin-left:81.5pt;text-indent:-.25in'><span
style='font-family:Symbol'><a
href="http://www.totalphase.com/support/product/aardvark_i2cspi"
title="blocked::http://www.totalphase.com/download/zip/aardvark-firmware-v3.42.zip"><span
style='color:windowtext'>·</span><span style='font-size:7.0pt;font-family:"Times New Roman","serif";
color:windowtext'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
style='font-family:"Arial","sans-serif";color:windowtext'>Tree View of all
PCI/PCIe devices in the system</span></a></span></p>

<p class=MsoBodyTextIndent style='margin-left:63.5pt;text-indent:-.25in'><span
style='font-family:Symbol'><a
href="http://www.totalphase.com/support/product/aardvark_i2cspi"
title="blocked::http://www.totalphase.com/download/zip/aardvark-firmware-v3.42.zip"><span
style='color:windowtext'>·</span><span style='font-size:7.0pt;font-family:"Times New Roman","serif";
color:windowtext'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
style='font-family:"Arial","sans-serif";color:windowtext'>I2C support in the
PLX API was updated to support required changes for using Aardvark API DLL
v2.x.</span></a></span></p>

<p class=MsoBodyTextIndent style='margin-left:63.5pt;text-indent:-.25in'><span
style='font-family:Symbol'><a
href="http://www.totalphase.com/support/product/aardvark_i2cspi"
title="blocked::http://www.totalphase.com/download/zip/aardvark-firmware-v3.42.zip"><span
style='color:windowtext'>·</span><span style='font-size:7.0pt;font-family:"Times New Roman","serif";
color:windowtext'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
style='font-family:"Arial","sans-serif";color:windowtext'>I2C support was added
to the PLX API in Linux, but PLX has not tested this feature on a Linux
platform.</span></a></span></p>

<p class=MsoBodyTextIndent style='margin-left:63.5pt;text-indent:-.25in'><span
style='font-family:Symbol'><a
href="http://www.totalphase.com/support/product/aardvark_i2cspi"
title="blocked::http://www.totalphase.com/download/zip/aardvark-firmware-v3.42.zip"><span
style='color:windowtext'>·</span><span style='font-size:7.0pt;font-family:"Times New Roman","serif";
color:windowtext'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
style='font-family:"Arial","sans-serif";color:windowtext'>PlxCm now supports an
‘<b><i>I2C</i></b>’ command to access PLX switches over I2C.</span></a></span></p>

<p class=MsoBodyTextIndent style='margin-left:63.5pt;text-indent:-.25in'><span
style='font-family:Symbol'><a
href="http://www.totalphase.com/support/product/aardvark_i2cspi"
title="blocked::http://www.totalphase.com/download/zip/aardvark-firmware-v3.42.zip"><span
style='color:windowtext'>·</span><span style='font-size:7.0pt;font-family:"Times New Roman","serif";
color:windowtext'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
style='font-family:"Arial","sans-serif";color:windowtext'>Following changes
were done to the GenMon Application:</span></a></span></p>

<p class=MsoBodyTextIndent style='margin-left:81.5pt;text-indent:-.25in'><span
style='font-family:Symbol'><a
href="http://www.totalphase.com/support/product/aardvark_i2cspi"
title="blocked::http://www.totalphase.com/download/zip/aardvark-firmware-v3.42.zip"><span
style='color:windowtext'>·</span><span style='font-size:7.0pt;font-family:"Times New Roman","serif";
color:windowtext'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
style='font-family:"Arial","sans-serif";color:windowtext'>Added logging
performance data to a text file</span></a></span></p>

<p class=MsoBodyTextIndent style='margin-left:81.5pt;text-indent:-.25in'><span
style='font-family:Symbol'><a
href="http://www.totalphase.com/support/product/aardvark_i2cspi"
title="blocked::http://www.totalphase.com/download/zip/aardvark-firmware-v3.42.zip"><span
style='color:windowtext'>·</span><span style='font-size:7.0pt;font-family:"Times New Roman","serif";
color:windowtext'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
style='font-family:"Arial","sans-serif";color:windowtext'>Presentation mode for
GenMon Performance monitor to display important data in large font for demo
purposes.</span></a></span></p>

<p class=MsoBodyTextIndent style='margin-left:81.5pt;text-indent:-.25in'><span
style='font-family:Symbol'><a
href="http://www.totalphase.com/support/product/aardvark_i2cspi"
title="blocked::http://www.totalphase.com/download/zip/aardvark-firmware-v3.42.zip"><span
style='color:windowtext'>·</span><span style='font-size:7.0pt;font-family:"Times New Roman","serif";
color:windowtext'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
style='font-family:"Arial","sans-serif";color:windowtext'>Running average of
Payload byte rate</span></a></span></p>

<p class=MsoBodyTextIndent style='margin-left:63.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><b><i>PLX
API and Type Changes</i></b>: SDK 6.10 includes some API and data type/structure
changes that affect applications written with a previous SDK version.&nbsp; The
following is a general list of changes.&nbsp; For additional API or structure
details, please refer to the PLX SDK User’s Manual.&nbsp; The majority of the
changes are related to the PLX DMA API functions to properly support the new
DMA controller in PLX 8600 switches.</p>

<p class=MsoBodyTextIndent style='margin-left:81.0pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><b><i>PlxPci_PciRegisterRead_Unsupported</i></b>
renamed to <b><i>PlxPci_PciRegisterRead_BypassOS</i></b></p>

<p class=MsoBodyTextIndent style='margin-left:81.0pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><b><i>PlxPci_PciRegisterWrite_Unsupported</i></b>
renamed to <b><i>PlxPci_PciRegisterWrite_BypassOS</i></b></p>

<p class=MsoBodyTextIndent style='margin-left:81.0pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><b><i>PlxPci_ChipTypeGet</i></b>
and <b><i>PlxPci_ChipTypeSet</i></b> - <i>ChipType</i> parameter changed from
32-bit to 16-bit</p>

<p class=MsoBodyTextIndent style='margin-left:81.0pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Added
<b><i>PlxPci_DmaGetProperties</i></b> and <b><i>PlxPci_DmaSetProperties</i></b>.&nbsp;
This allows for a more flexible and simpler use of controlling the DMA controller’s
properties.</p>

<p class=MsoBodyTextIndent style='margin-left:81.0pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><b><i>PLX_INTERRUPT</i></b>
structure was modified to consolidate interrupts of the same type.&nbsp; For
example, instead of having separate fields for a DMA channel (e.g. DmaDone_0,
DmaDone_1, etc), a field is now specified by the number of bits (e.g.
DmaDone:4).&nbsp; Bit positions correspond to the channel number, i.e. bit 0 =
DMA channel 0, bit 1 = DMA channel 1, etc.&nbsp; The same principle applies to
other interrupt fields, such as Local<span style='font-family:Wingdings'>à</span>PCI
interrupt, Message, DMA error, etc.&nbsp; Note that many interrupt field names
have been changed.</p>

<p class=MsoBodyTextIndent style='margin-left:81.0pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><b><i>PLX_DMA_PROP</i></b>
structure was modified to add fields that support 8600 DMA</p>

<p class=MsoBodyTextIndent style='margin-left:81.0pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><b><i>PLX_DMA_PARAMS</i></b>
structure was modified to simplify programming the DMA.&nbsp; The structure now
accepts 64-bit addresses in a single field.&nbsp; Some fields apply only to
9000 DMA controllers (e.g. <i>LocalAddr</i>) and some apply only to 8600 DMA
(e.g. <i>AddrSource</i>).</p>

<p class=MsoBodyTextIndent style='margin-left:63.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>The
PLX Linux package was modified to also support Big Endian CPUs, typically used
in embedded platforms (e.g. MIPS, PPC)</p>

<p class=MsoBodyTextIndent style='margin-left:63.5pt;text-indent:-.25in'><span
style='font-family:Symbol'><a
href="http://www.totalphase.com/support/product/aardvark_i2cspi"
title="blocked::http://www.totalphase.com/download/zip/aardvark-firmware-v3.42.zip"><span
style='color:windowtext'>·</span><span style='font-size:7.0pt;font-family:"Times New Roman","serif";
color:windowtext'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><b><i><span
style='font-family:"Arial","sans-serif";color:windowtext'>Bugs Fixed</span></i></b></a></span></p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:81.5pt;text-indent:-.25in'><span style='font-family:Symbol'>·</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><i>[PLX 8000 NT Drivers] Driver failed to distinguish between NT Virtual
and Link side<br>
</i>The PLX 8000 NT driver NT Virtual vs. Link detection algorithm was modified
in the previous SDK release to use the internal NT Link BAR register as part of
the detection.&nbsp; The algorithm, however, was executed before the driver
mapped BAR 0 for access to the internal registers.&nbsp; As a result, internal
register accesses were not yet possible and the algorithm defaulted to the NT
Virtual side.<br>
<br>
The fix involved moving the NT detection algorithm after the driver maps BAR 0
for accesses to internal registers.<br>
<br>
Affected files:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <i>PlxSdk\&lt;Windows&gt; or
&lt;Linux&gt;\Driver\Source.Plx8000\Driver.c </i></p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:81.5pt;text-indent:-.25in'><span style='font-family:Symbol'>·</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><i>[PLX API] Fixed issue with connecting to a device over I2C and the
upstream is not port 0 <br>
</i>The I2C portion of the PLX API was not able to properly probe a PLX switch
it was connected to if the upstream port is set to be other than port 0.&nbsp;
The PLX API now first probes some registers in the switch to determine which
port is upstream to obtain the required information needed to probe remaining
ports.<br>
<br>
Affected files:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <i>PlxSdk\&lt;Windows&gt; or
&lt;Linux&gt;\PlxApi\PlxApiI2cAa.c</i></p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:81.5pt;text-indent:-.25in'><span style='font-family:Symbol'>·</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><i>[PLX Linux Drivers] Spinlock held when a device is started could
cause kernel panic <br>
</i>PLX Linux PnP drivers support starting/stopping of devices when they are
selected/released.&nbsp; When a device is started, the PLX driver holds a
spinlock to ensure it’s the only thread that is starting/stopping the
device.&nbsp; During the start procedure, some kernel calls could sleep, which
could result in a deadlock since a spinlock is held.&nbsp; If the kernel is
built with the flag <b><i>CONFIG_DEBUG_SPINLOCK_SLEEP</i></b>, a kernel error
is displayed similar to “<b><i>BUG: sleeping function called from invalid
context at…</i></b>”.<br>
<br>
The fix involved replacing the spinlock with a mutex.&nbsp; PLX drivers now
hold a mutex instead of a spinlock during device start/stop.<br>
<br>
Affected files:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <i>PlxSdk\Linux\Driver\Source.Plx&lt;DriverName&gt;\DrvDefs.h</i><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PlxSdk\Linux\Driver\Source.Plx&lt;DriverName&gt;\Dispatch.c<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PlxSdk\Linux\Driver\Source.Plx&lt;DriverName&gt;\Driver.c</i></p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:81.5pt;text-indent:-.25in'><span style='font-family:Symbol'>·</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><i>[PLX Linux Drivers] Kernel panic when cancelling a sleeping PLX
Notification object from another thread <br>
</i>In a multi-threaded application, if one thread is sleeping (<i>PlxPci_NotificationWait</i>)
and another thread cancels the same object (<i>PlxPci_NotificationCancel</i>),
a kernel panic will arise.&nbsp; The cancel routine releases the kernel memory
for the wait object before the sleeping thread wakes up and exits.&nbsp; The
sleeping thread could still access the object after it wakes.<br>
<br>
The fix involved some synchronization between the cancel thread and any other
thread that is sleeping.&nbsp; An atomic counter was added to the object to
keep track of the number of sleeping threads on it.&nbsp; Additionally, the
object’s state is now kept track of.&nbsp; If it is marked for deletion, it
will not be used any further in threads wishing to wait.&nbsp; If other threads
are sleeping on the object, the cancel thread wakes them up, relinquishes its
CPU time slice for the other threads to wake, then frees the wait object.<br>
<br>
Affected files:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <i>PlxSdk\Linux\Driver\Source.Plx&lt;DriverName&gt;\DrvDefs.h</i><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PlxSdk\Linux\Driver\Source.Plx&lt;DriverName&gt;\ApiFunc.c<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PlxSdk\Linux\Driver\Source.Plx&lt;DriverName&gt;\SuppFunc.c</i></p>

<h2><a name="_PLX_SDK_6.00"></a>PLX SDK 6.00</h2>

<p class=MsoBodyTextIndent style='margin-left:63.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Added
support for the new PLX PCIe Gen-2 devices (8618, 8617, 8614, 8608, 8607, 8606,
8605, 8604, 8603)</p>

<p class=MsoBodyTextIndent style='margin-left:63.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Updates
to Performance Monitor and Packet Generator.</p>

<p class=MsoBodyTextIndent style='margin-left:63.5pt;text-indent:-.25in'><span
style='font-family:Symbol'><a
href="http://www.totalphase.com/support/product/aardvark_i2cspi"
title="blocked::http://www.totalphase.com/download/zip/aardvark-firmware-v3.42.zip"><span
style='color:windowtext'>·</span><span style='font-size:7.0pt;font-family:"Times New Roman","serif";
color:windowtext'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
style='font-family:"Arial","sans-serif";color:windowtext'>Following additions
to the PEX Device Editor GUI application:</span></a></span></p>

<p class=MsoBodyTextIndent style='margin-left:81.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Serdes
Eye feature enhancements</p>

<p class=MsoBodyTextIndent style='margin-left:81.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Default
to last known revision for any new device revisions.</p>

<p class=MsoBodyTextIndent style='margin-left:81.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Lane
status panel enhancements.</p>

<p class=MsoBodyTextIndent style='margin-left:81.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>EEPROM
editor ensures register 1DC is always the first register.</p>

<p class=MsoBodyTextIndent style='margin-left:81.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Updates
to Probe Mode feature (For internal Debug only)</p>

<p class=MsoBodyTextIndent style='margin-left:63.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Windows
Vista 64-bit Kernel Driver Signing has been implemented.</p>

<p class=MsoBodyTextIndent style='margin-left:63.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>[Linux
Applications] The Curses library is no longer used in PLX Linux
applications.&nbsp; Some console functions were re-written using calls to the
TTY driver, which eliminated the need for the [n]curses console library.</p>

<p class=MsoBodyTextIndent style='margin-left:63.5pt;text-indent:-.25in'><span
style='font-family:Symbol'><a
href="http://www.totalphase.com/support/product/aardvark_i2cspi"
title="blocked::http://www.totalphase.com/download/zip/aardvark-firmware-v3.42.zip"><span
style='color:windowtext'>·</span><span style='font-size:7.0pt;font-family:"Times New Roman","serif";
color:windowtext'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><b><i><span
style='font-family:"Arial","sans-serif";color:windowtext'>Bugs Fixed</span></i></b></a></span></p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:81.5pt;text-indent:-.25in'><span style='font-family:Symbol'>·</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><i>[Windows Drivers] Windows Power Management code in PLX drivers
updated<br>
</i>The Power Management code in all PLX drivers has been completely
re-written.&nbsp; This fixed numerous issues and limitations with the Power
Management code.&nbsp; The PM modules also contain updates to handle the PM
changes introduced with Vista.<br>
<br>
Affected files:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <i>PlxSdk\Windows\Driver\Source.Plx6000\Power.c<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PlxSdk\Windows\Driver\Source.Plx8000\Power.c<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PlxSdk\Windows\Driver\Source.Plx9000\Power.c</i></p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:81.5pt;text-indent:-.25in'><span style='font-family:Symbol'>·</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><i>[Windows Drivers] Removed 64MB Mapping Limitation of PLX Physical
Memory to User Space <br>
</i>Due to a limitation with Windows Memory Descriptor List (MDL) structures,
mappings of PLX allocated DMA buffers to user space were limited to ~64MB in
32-bit Windows and ~32MB in 64-bit Windows.&nbsp; This affected the API calls <i>PlxPci_PhysicalMemoryMap()</i>
and <i>PlxPci_CommonBufferMap()</i> if the respective buffer exceeded the
mapping limitation.<br>
<br>
To resolve this issue, PLX drivers now limit the mapping of an MDL to ~62MB but
map multiple MDLs to cover the entire size of the buffer.&nbsp; MDLs are
chained together using a <i>Next</i> field already provided in the
structure.&nbsp; This assures proper unmapping and cleanup later.<br>
<br>
<b><i>Note</i></b><i>: Mappings may still fail if Windows does not have enough
Page-Table Entries (PTE) to perform a mapping.</i><br>
<br>
Affected files:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <i>PlxSdk\Windows\Driver\Source.Plx6000\ApiFunc.c<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PlxSdk\Windows\Driver\Source.Plx6000\SuppFunc.c<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PlxSdk\Windows\Driver\Source.Plx8000\ApiFunc.c<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PlxSdk\Windows\Driver\Source.Plx8000\SuppFunc.c<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PlxSdk\Windows\Driver\Source.Plx9000\ApiFunc.c<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PlxSdk\Windows\Driver\Source.Plx9000\SuppFunc.c</i></p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:81.5pt;text-indent:-.25in'><span style='font-family:Symbol'>·</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><i>[Linux Drivers] Resolved Race Condition between DPC Routine and
Driver Stopping a Device<br>
</i>In PLX Linux drivers, a race condition existed if the device asserts an
interrupt at the same time the driver is stopping the device.&nbsp; If an
application terminates and the device is not being used by any other
application, the PLX driver automatically stops the device, which includes the
release of resources.&nbsp; If the device has a pending interrupt, the ISR
could trigger and schedule a DPC task to complete interrupt processing.&nbsp;
The DPC could start to execute after the driver stopped the device, which
caused a kernel panic because kernel mapping for register access were released.<br>
<br>
To resolve this issue, some synchronization was added between the main driver
code and the ISR/DPC routines.&nbsp; Before the device is about to be stopped,
the driver sets a flag informing the ISR not to schedule any more DPC
tasks.&nbsp; If a DPC is already pending, the main driver waits until it
completes before releasing resources.&nbsp; The DPC also includes an error
check to make sure that the device registers are accessible before continuing;
otherwise, it aborts.<br>
<br>
Affected files:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <i>PlxSdk\Linux\Driver\Source.Plx6000\Driver.c<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PlxSdk\Linux\Driver\Source.Plx6000\DrvDefs.h<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PlxSdk\Linux\Driver\Source.Plx6000\PlxInterrupt.c<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PlxSdk\Linux\Driver\Source.Plx8000\Driver.c<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PlxSdk\Linux\Driver\Source.Plx8000\DrvDefs.h<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PlxSdk\Linux\Driver\Source.Plx8000\PlxInterrupt.c<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PlxSdk\Linux\Driver\Source.Plx9000\Driver.c<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PlxSdk\Linux\Driver\Source.Plx9000\DrvDefs.h<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PlxSdk\Linux\Driver\Source.Plx9000\PlxInterrupt.c</i></p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:81.5pt;text-indent:-.25in'><span style='font-family:Symbol'>·</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><i>[Linux Drivers] PlxPci_DeviceFind Failed when Searching non-Primary
device using Subsystem ID as Criteria <br>
</i>When <i>PlxPci_DeviceFind()</i> is called, the PLX drivers compares the
information provided with the properties of each device the driver
manages.&nbsp; When the driver starts, it scans for supported devices and fills
in the PLX_DEVICE_KEY for each one.&nbsp; The Subsystem ID and PCI Revision,
however, were only determined for the first device found.&nbsp; If an
application attempted to search for one of these devices using the Subsystem ID
or PCI Revision as search criteria, the search always failed.<br>
<br>
To resolve this issue, the subsystem ID and PCI revision fields are now filled
in the PLX_DEVICE_KEY when every supported device is detected.<br>
<br>
Affected files:&nbsp;&nbsp;&nbsp; <i>PlxSdk\Linux\Driver\Source.Plx6000\Driver.c<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PlxSdk\Linux\Driver\Source.Plx8000\Driver.c<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PlxSdk\Linux\Driver\Source.Plx9000\Driver.c</i></p>

<h2><a name="_PLX_SDK_5.22_"></a>PLX SDK 5.22</h2>

<p class=MsoBodyTextIndent style='margin-left:63.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Added
I2C support to the PLX GenMon utility.</p>

<p class=MsoBodyTextIndent style='margin-left:63.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Windows
PLX Service driver now supports allocation of PCI buffers (PlxPci_CommonBufferXxx
&amp; PlxPci_PhysicalMemoryXxx API calls)</p>

<p class=MsoBodyTextIndent style='margin-left:63.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Added
native support for I2C into the Windows PLX API.&nbsp; Only Aardvark USB I2C is
currently supported.</p>

<h2><a name="_PLX_SDK_5.21_"></a>PLX SDK 5.21</h2>

<p class=MsoBodyTextIndent style='margin-left:63.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Updated
PLX GenMon (previously called “PLX Exerciser”).&nbsp; GenMon is a utility that
allows control of the Packet Generator and Performance Counters found only in
PLX 8600 series devices.&nbsp; The Performance Monitor may be executed without
running the Packet Generator and includes graphical depiction of PCI Express performance
for each active port.</p>

<p class=MsoBodyTextIndent style='margin-left:63.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Some
minor internal changes to Serdes Eye feature.</p>

<p class=MsoBodyTextIndent style='margin-left:63.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Updated
Probe Mode feature to use internal Mode and capture data from Debug RAM. This
is for Internal Debug purposes only.</p>

<p class=MsoBodyTextIndent style='margin-left:63.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Enabled
Port-4 in the PEX Device Editor for 8624, 8616 &amp; 8612.</p>

<h2><a name="_PLX_SDK_5.20_"></a>PLX SDK 5.20</h2>

<p class=MsoBodyTextIndent style='margin-left:63.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Different
levels of device access based on the NDA signed with PLX.</p>

<p class=MsoBodyTextIndent style='margin-left:63.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Added
support for PLX 8600 devices.</p>

<p class=MsoBodyTextIndent style='margin-left:63.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Added
Packet Generator application</p>

<p class=MsoBodyTextIndent style='margin-left:63.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Added
the following new features in the PDE GUI application:</p>

<p class=MsoBodyTextIndent style='margin-left:1.25in;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i>Serdes
Eye Width (For 8600 series only)</i></p>

<p class=MsoBodyTextIndent style='margin-left:1.25in;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i>Performance
Monitoring (For 8600 series only)</i></p>

<p class=MsoBodyTextIndent style='margin-left:1.25in;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i>Save
Memory Mapped Screen Data to text file and read back from text file in offline
mode</i></p>

<p class=MsoBodyTextIndent style='margin-left:1.25in;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i>Enhancements
to Eeprom Diff tool</i></p>

<p class=MsoBodyTextIndent style='margin-left:1.25in;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i>Probe
Mode for Internal Debugging purposes(For 8600 series only)</i></p>

<p class=MsoBodyTextIndent style='margin-left:63.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>For
PLX Windows drivers, the debug version of the drivers may be configured to dump
debug log messages to a file instead of relying on a connected Windows debugger
(e.g. over serial connection).&nbsp; To enable this feature, the driver must be
rebuilt after enabling the <b><i>#define PLX_LOG_TO_FILE</i></b> statement in
the respective <i>DriverDefs.h</i> driver file or by setting <b>PLX_LOG_TO_FILE=1</b>
in the environment variables.</p>

<p class=MsoBodyTextIndent style='margin-left:63.5pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><b><i>Bugs
Fixed</i></b></p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:81.5pt;text-indent:-.25in'><span style='font-family:Symbol'>·</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><i>[Windows Drivers] System Crash (blue screen) in Windows Vista during
Hibernate or Shutdown <br>
</i>When Windows Vista is powered off either because the user selected
Hibernate or Shutdown, the system crashed and resulted in a BSOD.&nbsp; This
has been determined as a PLX driver issue in the Power Management code.<br>
<br>
In SDK 5.20, when the PLX driver receives the power message IRP_MN_SET_POWER,
the driver ignores the message if the system is going into Hibernate or
Shutdown state.<br>
<br>
Affected files:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <i>PlxSdk\Windows\Driver\Source.Plx6000\Power.c<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PlxSdk\Windows\Driver\Source.Plx8000\Power.c<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PlxSdk\Windows\Driver\Source.Plx9000\Power.c</i></p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:81.5pt;text-indent:-.25in'><span style='font-family:Symbol'>·</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><i>[9000-series Windows Drivers] PlxPci_DmaTransferUserBuffer sometimes
doesn’t transfer all data properly on Windows 2003 Server with 3GB or more RAM<br>
</i>If Windows 2003 Server 32-bit edition is used on a system with 3GB or more
installed system RAM, the PLX API call <b><i>PlxPci_DmaTransferUserBuffer()</i></b>
may not properly transfer all parts of the supplied buffer.&nbsp; Although this
is a 32-bit version of Windows, it was determined that some pages of the
user-mode buffer reside outside the 32-bit addressable region.&nbsp; When the
PLX drivers setup the SGL descriptors to transfer the buffer, the upper 32-bits
of the user page’s physical address was ignored.<br>
<br>
To resolve this issue, the PLX driver first parses all the physical page
addresses that describe the user buffer to determine if 64-bit addressing is
required.&nbsp; If at least one page requires an address greater than 32-bits,
the PLX driver enables DMA Dual-Addressing in the PLX chip and creates 32-byte
Dual-Addressing descriptors for the transfer.&nbsp; If only 32-bits are
required, the standard 16-byte descriptor format is used and Dual-Addressing is
disabled.<br>
<br>
Affected files:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <i>PlxSdk\Windows\Driver\Source.Plx9000\SuppFunc.h<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PlxSdk\Windows\Driver\Source.Plx9000\SuppFunc.c</i><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PlxSdk\Windows\Driver\Source.Plx9000\Chip\9080\PlxChipApi.c<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PlxSdk\Windows\Driver\Source.Plx9000\Chip\9054\PlxChipApi.c<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PlxSdk\Windows\Driver\Source.Plx9000\Chip\9056\PlxChipApi.c<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PlxSdk\Windows\Driver\Source.Plx9000\Chip\9656\PlxChipApi.c<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PlxSdk\Windows\Driver\Source.Plx9000\Chip\8311\PlxChipApi.c<br>
<br>
<b>Note</b>: The PLX 9080 device does not support DMA Dual-addressing.&nbsp; If
the PLX 9080 driver detects that 64-bit DMA is required for a particular
transfer, it will return an error of ApiUnsupportedFunction.</i></p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:81.5pt;text-indent:-.25in'><span style='font-family:Symbol'>·</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><i>&nbsp;[Windows PLX API] PlxPci_NotificationStatus API doesn’t work<br>
</i>The PLX API call <i>PlxPci_NotificationStatus</i> had an issue in that it
sent the incorrect information to the PLX driver to query the status of the
notification object.&nbsp; The API call was updated to resolve this issue.<br>
<br>
Affected files:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <i>PlxSdk\Windows\PlxApi\PlxApi.c</i></p>

<h2><a name="_PLX_SDK_5.10_1"></a>PLX SDK 5.10</h2>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:.75in;text-indent:-9.0pt'><span style='font-family:Symbol'>·</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp; </span><b><i>Added
support for new devices and revisions</i></b><br>
Support for new devices and revisions was added (i.e. 8112 &amp; 8500 series).</p>

<h2><a name="_PLX_SDK_5.00_1"></a>PLX SDK 5.00</h2>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:.75in;text-indent:-9.0pt'><span style='font-family:Symbol'>·</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp; </span><b><i>Added
Support for Windows Vista (32-bit only)</i></b><br>
The PLX SDK has been tested with and now supports Windows Vista 32-bit.&nbsp;
Vista 64-bit requires signed drivers, which PLX drivers are not currently.</p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:.75in;text-indent:-9.0pt'><span style='font-family:Symbol'>·</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp; </span><b><i>PCI
SDK &amp; PCI Express (PEX) SDK Merger</i></b><br>
As of PLX SDK v5.0, the PLX PCI SDK and PLX PEX SDK are now merged into the <b>PLX
SDK</b>.&nbsp; The PLX SDK maintains only a single PLX API (i.e. <i>PlxPci_Xxx</i>)
and supports all PLX 9000, 6000, &amp; 8000 series devices.&nbsp; The PLX API traditionally
used for PLX 9000 devices has been deprecated and is no longer supported.&nbsp;
There is an API translation layer provided in the PLX SDK called <i>PlxLegacyApi</i>
to allow existing applications to run.&nbsp; It is recommended that
applications are ported to use the newer API.</p>

<p class=MsoBodyTextIndent style='margin-top:6.0pt;margin-right:0in;margin-bottom:
6.0pt;margin-left:54.7pt;text-indent:-9.35pt'><span style='font-family:Symbol'>·</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp; </span><b><i>PEX
Device Editor GUI Feature additions</i></b></p>

<p class=MsoBodyTextIndent style='margin-top:6.0pt;margin-right:0in;margin-bottom:
6.0pt;margin-left:1.25in;text-indent:-.25in'><span style='font-family:"Courier New"'>o</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;
</span>All Memory mapped, Config register and Eeprom features are available
through the I2C. Users of this feature will need to get a USB to I2C device from
TotalPhase and install its drivers in the system before they can use this
feature.</p>

<p class=MsoBodyTextIndent style='margin-top:6.0pt;margin-right:0in;margin-bottom:
6.0pt;margin-left:1.25in;text-indent:-.25in'><span style='font-family:"Courier New"'>o</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;
</span>All the register table information from the Databooks have been
integrated into the PEX Device editor.</p>

<p class=MsoBodyTextIndent style='margin-top:6.0pt;margin-right:0in;margin-bottom:
6.0pt;margin-left:1.25in;text-indent:-.25in'><span style='font-family:"Courier New"'>o</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;
</span>Added Set Chip Type feature which allows a device that shows up as a
non-PLX device to be set to a particular PLX chip type. </p>

<p class=MsoBodyTextIndent style='margin-top:6.0pt;margin-right:0in;margin-bottom:
6.0pt;margin-left:1.25in;text-indent:-.25in'><span style='font-family:"Courier New"'>o</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;
</span>Eeprom diff can be done for Altair and 8111 devices too.</p>

<p class=MsoBodyTextIndent style='margin-top:6.0pt;margin-right:0in;margin-bottom:
6.0pt;margin-left:1.25in;text-indent:-.25in'><span style='font-family:"Courier New"'>o</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;
</span>Some columns can be hidden from view in the PEX Device Editor GUI.</p>

<p class=MsoBodyTextIndent style='margin-top:6.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:1.25in;text-indent:-.25in'><span style='font-family:"Courier New"'>o</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;
</span>The Eeprom Editor GUI screen now shows the CRC value and whether it is
correct or not. There is also a button to update the CRC after any changes are
made to the Eeprom locations.</p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:.75in;text-indent:-9.0pt'><span style='font-family:Symbol'>·</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp; </span><b><i>PLX
Windows Drivers Increased Write Performance for Prefetchable BAR Spaces</i></b><br>
<i>Refer to 9. Increase Host CPU Write (“Direct Slave”) Performance to PLX 9000
&amp; 8000 BAR Spaces.</i></p>

<p class=MsoBodyTextIndent style='margin-left:.75in;text-indent:-8.65pt'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp; </span><b><i>Bugs Fixed</i></b></p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:1.25in;text-indent:-.25in'><span style='font-family:"Courier New"'>o</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;
</span><i>[PLX 9000 Drivers] DMA engine not halted if application terminates
abnormally<br>
</i>When an application terminates or closes a PLX device, the PLX driver
contained cleanup code to release resources owned by the application, including
the closing of DMA channels.&nbsp; If an SGL DMA transfer was still in
progress, this could result in an unstable system because the PLX driver would
release the SGL descriptor buffer as well as unlock the pages of the user-mode
buffer.&nbsp; If the DMA engine continued to transfer data, it could then
corrupt system memory that it no longer owned.<br>
<br>
In SDK 5.0, the DMA channel close functions were revised to additionally abort the
DMA transfer before releasing any resources used by the DMA.&nbsp; This halts
the DMA engine from transferring any more data and corrupting system memory.<br>
<br>
Affected files:&nbsp;&nbsp; <i>PlxSdk\&lt;Windows or
Linux&gt;\Driver\Source.Plx9000\Chip\9080\PlxChipApi.c<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PlxSdk\&lt;Windows or Linux&gt;\Driver\Source.Plx9000\Chip\9054\PlxChipApi.c<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PlxSdk\&lt;Windows or Linux&gt;\Driver\Source.Plx9000\Chip\9056\PlxChipApi.c<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PlxSdk\&lt;Windows or Linux&gt;\Driver\Source.Plx9000\Chip\9656\PlxChipApi.c<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PlxSdk\&lt;Windows or Linux&gt;\Driver\Source.Plx9000\Chip\8311\PlxChipApi.c</i></p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:1.25in;text-indent:-.25in'><span style='font-family:"Courier New"'>o</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;
</span><i>[Windows Driver] SGL descriptor build code incorrect parsing of
physical page list on Windows x64<br>
</i>When an application calls <i>PlxDmaSglTransfer</i>, the PLX driver
page-locks the passed user-mode buffer and determines its physical page
addresses to build the SGL descriptors for the DMA engine.&nbsp; The page list
is located after the MDL structure that describes the user-mode buffer.&nbsp;
The PLX driver always assumed the page list was a series of 32-bit values;
however, on Windows x64, the pages are specified as 64-bit values, even though
the upper 32-bits are always 0.&nbsp; As a result, the PLX 64-bit driver would
not get the correct page list.<br>
<br>
The PLX driver was modified to use 32-bit or 64-bit page list depending upon
which version of the driver was built.<br>
<br>
Affected files:&nbsp;&nbsp; <i>PlxSdk\Windows\Driver\Source.Plx9000\SupportFunc.c</i></p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:1.25in;text-indent:-.25in'><span style='font-family:"Courier New"'>o</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;
</span><i>[Linux Drivers]: Fixed global namespace conflict of PLX global driver
object between PLX drivers</i> <br>
In the PLX Linux drivers, the drivers create a global DRIVER_OBJECT that
manages all the devices assigned to the driver.&nbsp; To access this object,
the drivers referred to the global variable <b><i>pGbl_DriverObject</i></b>.&nbsp;
It turns out, however, that this variable ended up in the global
namespace.&nbsp; If two or more PLX drivers are loaded at the same time, such
as a 9054 and 9030, they would end up referencing the same DRIVER_OBJECT
variable.&nbsp; Once one of the drivers was uninstalled, it released the DRIVER_OBJECT
memory and prevents the other PLX driver from functioning properly.<br>
<br>
To resolve this issue, each PLX driver was given a unique name for its global
object pointer based on the chip type.&nbsp; During compilation, the global
variable takes on a name like <b><i>pGbl_DriverObject_9054</i></b>, <b><i>pGbl_DriverObject_9030</i></b>,
or <b><i>pGbl_DriverObject_8000</i></b>.&nbsp; With a unique pointer name for
each driver, the namespace conflict was resolved.<br>
<br>
Affected files: &nbsp; <i>PlxSdk\Linux\Driver\Source.9000\DriverDefs.h<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PlxSdk\Linux\Driver\Source.9000\Driver.c</i></p>

<h2><a name="_SDK_4.40_1"></a><a name="_PCI_SDK_4.40"></a><a
name="_PEX_SDK_2.10"></a>PEX SDK 2.10</h2>

<p class=MsoBodyTextIndent style='margin-left:.75in;text-indent:-9.0pt'><a
name="_PEX_SDK_2.0"></a><span style='font-family:Symbol'>·</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp; </span><i>Various
bug fixes and new API calls added</i></p>

<h2>PEX SDK 2.0</h2>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
6.0pt;margin-left:54.7pt;text-indent:-9.35pt'><span style='font-family:Symbol'>·</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp; </span><i>Introduced
the PEX Device Editor GUI</i></p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
6.0pt;margin-left:54.7pt;text-indent:-9.35pt'><span style='font-family:Symbol'>·</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp; </span><i>Replaced
DAPI &amp; PAM architecture from PEX SDK v1.x with PLX API and driver.</i></p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
6.0pt;margin-left:.75in;text-indent:-9.0pt'><span style='font-family:Symbol'>·</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp; </span><i>64-bit
Windows &amp; Linux drivers for PLX 8000 devices</i></p>

<h2>PCI SDK 4.40</h2>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:.75in;text-indent:-9.0pt'><span style='font-family:Symbol'>·</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp; </span><b><i>Support
for Linux Kernel 2.6</i></b><br>
PLX PCI SDK 4.40 now supports Linux kernel 2.6 in addition to kernel 2.4.&nbsp;
Linux kernel 2.2 is no longer supported.&nbsp; Please refer to the PLX Linux Host
Support Release Notes for additional information.</p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:.75in;text-indent:-9.0pt'><a name="_2.___2"></a><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp; </span><b><i>Support f<span
class=BodyTextIndentChar>or 64-bit </span>Windows &amp; Linux<br>
</i></b>PLX PCI SDK 4.40 now supports 64-bit Windows &amp; Linux
platforms.&nbsp; For Windows, the PLX drivers have only been tested with x64 on
an AMD64 system running Windows x64.&nbsp; The Linux drivers were also tested
on an x64 system, as well as an IA64 system (SGI Altrix 350).&nbsp; PLX source
code remains consistent between 32-bit &amp; 64-bit.&nbsp; The same source is
used to build drivers for either environment.&nbsp; Please refer to the PLX SDK
User’s Manual for additional information.</p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:.75in;text-indent:-9.0pt'><a name="_3.___2"></a><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp; </span><b><i>Added Support for 8111,
8311, &amp; 6466 Devices<br>
</i></b>Added support for new chips including the PLX 8111, 8311, and
6466.&nbsp; This includes support in PLXMon, as well as API support in PLX
Windows &amp; Linux drivers.&nbsp; For the PLX 8111, the PLX PCI Service driver
will probe the system ACPI tables to search for PCI Express Enhanced
Configuration Access Mechanism (ECAM) address.&nbsp; If found, this will be
used to access PCI Express registers (offsets &gt;= 100h), since current Windows
&amp; Linux versions do not support PCI Express registers.<br>
<br>
<b>Note</b>:&nbsp; The 8311 will show up as 2 devices in PLXMon.&nbsp; The
first will be an 8111 and the second will be an 8311.</p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:.75in;text-indent:-9.0pt'><a name="_2.___1"></a><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp; </span><b><i>Added a Simple GUI
Application for Windows<br>
</i></b>A very simple Graphical User Application (GUI) application was added to
the SDK for Windows.&nbsp; This provides an example of how to call the PLX API
from within a GUI.&nbsp; The app was created with Visual C++ and uses
MFC.&nbsp; It is located in PciSdk\Windows\Samples\SampleAppGUI.</p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:.75in;text-indent:-8.65pt'><a name="_3.___1"></a><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp; </span><b><i>Added new PCI register
“Fast” API functions<br>
</i></b>In previous SDK, when a PCI configuration register was accessed with
the API (e.g. PlxPci_PciRegisterRead), the PLX API had to scan the system each
time in an effort to connect to an existing PLX driver, even if a device was already
open.&nbsp; To minimize the overhead, new PLX API functions were added that
accept a PLX_DEVICE_OBJECT instead of the bus/slot/function combination.&nbsp;
In the new functions, the API simply submits the request to the active driver
instead of scanning the system for an available one.<br>
<br>
Please refer to the PCI SDK Programmer’s Reference Manual for additional
details.&nbsp; The new functions are:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <i>PlxPciRegisterReadFast<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <i>PlxPciRegisterWriteFast<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <i>PlxPci_PciRegisterReadFast<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <i>PlxPci_PciRegisterWriteFast</i></p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:.75in;text-indent:-9.0pt'><a name="_5.___1"></a><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp; </span><b><i>Removed Windows Driver SGL
Limitation (MaxSglTransferSize option)<br>
</i></b>In previous PLX SDK releases, the driver referred to a <i>MaxSglTransferSize</i>
parameter either in the registry or reverted to a default value.&nbsp; This
option was used by the PLX driver to pre-allocate enough resources to be used
when applications call the PLX API <i>PlxDmaSglTransfer</i>.&nbsp; Depending
upon the SDK version, the default setting was either 1MB or 3MB, which means
buffers larger than this size could not be transferred without modifying the
registry followed by a reboot.<br>
<br>
In SDK 4.4, the SGL build code in the Windows driver was re-written to now use
dynamically allocated buffers, which could later be re-used if large
enough.&nbsp; This modification eliminated the need for <i>MaxSglTransferSize</i>
and results in improved performance.&nbsp; The PLX Linux driver already works
this way.<br>
<br>
<b>Note</b>:&nbsp; SGL transfers are still limited to approximately 63MB due to
a limitation in Windows Memory Descriptor Lists (MDL).</p>

<p class=MsoBodyTextIndent style='margin-left:.75in;text-indent:-9.0pt'><a
name="_4.___1"></a><span style='font-family:Symbol'>·</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp; </span><b><i>Bugs
Fixed</i></b></p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:1.25in;text-indent:-.25in'><span style='font-family:"Courier New"'>o</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;
</span>[Linux Driver] <i>System sometimes hangs when device is closed on
kernels 2.6.15 &amp; up</i> <br>
On kernels 2.6.15 &amp; higher, if an applications calls either <i>PlxPciBarMap()</i>
or <i>PlxPciPhysicalMemoryAllocate(),</i> the system completely freezes when
the device is closed or the app terminates.&nbsp; It was determined that this
occurs if the driver calls <i>remap_pfn_range</i> outside the PLX driver’s <i>Dispatch_mmap()</i>
routine.&nbsp; The kernel Virtual Memory subsystem underwent quit a few changes
in kernel 2.6.15, which caused a problem with the PLX driver.<br>
<br>
The fix involved moving the calls to <i>remap_pfn_range</i> into the <i>Dispatch_mmap()</i>
routine.&nbsp; The PLX API was modified to accommodate for the new mapping
protocol. <br>
<br>
Affected files:&nbsp;&nbsp; <i>PlxLinux\Linux\Api\PciApi.c <br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PlxLinux\Linux\Driver\Common\Dispatch.c<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PlxLinux\Linux\Driver\Common.6000\Dispatch.c<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PlxLinux\Linux\Driver\Common\SupportFunc.c<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PlxLinux\Linux\Driver\Common.6000\SupportFunc.c</i></p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:1.25in;text-indent:-.25in'><span style='font-family:"Courier New"'>o</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;
</span>[Windows Driver] <i>PLX driver internal SGL buffer memory leak</i><br>
In previous PLX SDKs, the PLX driver managed an internal buffer which was used
to temporarily hold SGL descriptors when <i>PlxDmaSglTransfer</i> was
called.&nbsp; It turns out that the PLX memory management routines contained a
memory leak because they failed to release memory properly.&nbsp; After
numerous SGL transfers, the buffer could eventually report insufficient
resources for a new transfer request.<br>
<br>
Since the SDK 4.4 SGL code was completely re-written, PLX drivers no longer use
the PLX internal buffer management.&nbsp; As a result, the memory leak is no
longer an issue starting with SDK 4.4.</p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:1.25in;text-indent:-.25in'><span style='font-family:"Courier New"'>o</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;
</span>[Windows Driver] <i>IRP status not set properly when IRP_MN_SET_POWER
received</i><br>
When the PLX WDM driver receives an IRP_MN_SET_POWER message, it sets the device’s
power state by sending another message to itself to set the device’s power
state..&nbsp; The problem is that when a new IRP is created, the status was not
initialized to STATUS_NOT_SUPPORTED, which is required.&nbsp; Although this
does not cause a problem in most systems, those with the Microsoft Driver
Verifier tool installed could result in a system bug check (blue screen) due to
the Driver Verifier flagging the error.<br>
<br>
This was fixed by simply initializing the newly created IRP’s status to
STATUS_NOT_SUPPORTED.<br>
<br>
Affected files:&nbsp;&nbsp; <i>PciSdk\Windows\Driver\Common\Wdm\Power.c<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PciSdk\Windows\Driver\Common.6000\Wdm\Power.c</i></p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:1.25in;text-indent:-.25in'><span style='font-family:"Courier New"'>o</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;
</span>[Windows PLX INF File] <i>On certain Windows 2000 systems, the PLX
device driver won’t install</i><br>
In some cases on Windows 2000 systems, the PLX driver will not be installed
even though Windows 2000 processes the PLX INF file properly. &nbsp;This tends
to happen on systems which have had the PLX driver added and removed multiple
times.<br>
<br>
It was found that Windows 2000 INF parser sometimes has an issue if the
device’s Class GUID is not specified in the INF.&nbsp; Since PLX drivers are
generic, the devices fall into the “Unknown” class of devices, which is
specified in the INF.&nbsp; The GUID, however, was not specified.&nbsp; The fix
was to set the <b><i>ClassGuid</i></b>.directive to the GUID for the unknown
class of devices.&nbsp; For those interested, the GUID is <b><i>{4d36e97e-e325-11ce-bfc1-08002be10318}</i></b>.<br>
<br>
Affected files:&nbsp;&nbsp; P<i>ciSdk\Windows\Driver\Wdm\PciSdk.inf</i></p>

<h2><a name="_Linux_Support_for"></a><a name="_Non-Transparent_Mode_Windows"></a><a
name="_2.______Non-Transparent_Mode_Window"></a><a name="_Bugs_Fixed_in_3"></a><a
name="_6.______Bugs_Fixed_in_SDK_4.30"></a><a name="_SDK_v4.0"></a><a
name="_SDK_4.10"></a><a name="_SDK_4.20"></a><a name="_1.__"></a><a
name="_PCI_SDK_4.30"></a>PCI SDK 4.30</h2>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:63.0pt;text-indent:-.25in'><span style='font-family:Symbol'>·</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp; </span><b><i>Windows
98/Me Support for the PLX PCI 6000 Series PCI-to-PCI Bridge Chips</i></b><br>
SDK 4.20 introduced support for the PLX PCI 6000 family of PCI-to-PCI bridge
chips, but only for the Windows NT/2000/XP operating systems.&nbsp; SDK 4.30
now includes support for PCI 6000 series for Windows 98/Me.&nbsp; The driver is
a generic PLX PCI Service VxD that will be installed by the SDK
installation.&nbsp; The new driver supports the complete PCI 6000 PLX API and
the latest version of PLXMon.</p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:63.0pt;text-indent:-.25in'><span style='font-family:Symbol'>·</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp; </span><b><i>Non-Transparent
Mode Windows and Linux Drivers for the PLX PCI 6254 and 6540 Chips<br>
</i></b>New drivers are included to support the PLX PCI-to-PCI bridge chips
that support non-transparent mode.&nbsp; Drivers are provided for Windows and
Linux.</p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:63.0pt;text-indent:-.25in'><a name="_Bugs_Fixed_in_1"></a><a
name="_Increased_Direct_Slave"></a><a name="_Bugs_Fixed_in_2"></a><a
name="_PLXMon_Performance_Measure"></a><a
name="_3.______PLXMon_Performance_Measure_"></a><span style='font-family:Symbol'>·</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp; </span><b><i>PLXMon
Performance Measure Dialog<br>
</i></b>PLXMon v4.3 introduces a new Performance Measure Dialog.&nbsp; The
dialog will perform DMA or Direct Slave transfers to/from the local bus and
then provides a software measure of the transfer rate.&nbsp; By setting
different options in the chip, such as burst or read-ahead, the relative impact
on performance can then be measured to obtain optimal performance.&nbsp; <i>Refer
to the PLXMon section of the SDK User’s Manual for more information.</i></p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:63.0pt;text-indent:-.25in'><a name="_New_PCI_9000-Series"></a><a
name="_Updated_PLX_Driver"></a><a name="_4.______Updated_PLX_Driver_Options_"></a><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp; </span><b><i>Updated PLX Driver Options
Wizard<br>
</i></b>The PLX Driver Options Wizard has been updated to work in all versions
of Windows and now supports configuration of all available options for PLX
drivers.&nbsp; Users should no longer need to manually modify the
registry.&nbsp; <i>Refer to the SDK User’s Manual for additional details</i>.</p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:63.0pt;text-indent:-.25in'><a name="_New_PCI_9000-Series_1"></a><a
name="_5.______New_PCI_9000-Series_Interru"></a><span style='font-family:Symbol'>·</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp; </span><b><i>New
PCI 9000-Series Interrupt Notification API Functions<br>
</i></b>SDK 4.3 introduces a new interrupt notification model, which improves
performance and stability.&nbsp; The functions <i>PlxIntrAttach</i> and <i>PlxIntrWait</i>
have been removed and replaced with the functions <i>PlxNotificationRegisterFor</i>,
<i>PlxNotificationCancel</i>,<i> and PlxNotificationWait</i>.&nbsp; With the
new functions, registration for interrupt notification need only be done once
and application signaling by the driver has been simplified, resulting in
improved performance.&nbsp; <i>Refer to the details of these functions in the
SDK Programmer’s Reference Manual</i>.</p>

<p class=MsoBodyTextIndent style='margin-left:63.0pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp; </span><b><i>Bugs Fixed</i></b></p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:1.25in;text-indent:-.25in'><span style='font-family:"Courier New"'>o</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;
</span><i>[Windows &amp; Linux Drivers]: Fixed SGL keep local address constant
flag does not get cleared once set</i> <br>
For all PLX master devices that contain a DMA engine, the PLX SDK includes API
functions to support SGL mode operation.&nbsp; One of the options for SGL mode
is to keep the local address constant, which the PLX driver stores internally
as a flag when the DMA channel is opened.&nbsp; When the PLX driver builds SGL
descriptors, it will use this flag to determine whether the local address
should be incremented or remain constant.<br>
<br>
The problem occurs when the SGL DMA channel is first opened with the keep local
address constant option enabled, which causes the driver to update its internal
flag.&nbsp; If the SGL channel is later opened with the option disabled, the
PLX driver fails to clear the flag.&nbsp; So, once the flag is set, it could
never be cleared.<br>
<br>
The fix was simply to add code that clears the flag if the option is
disabled.&nbsp; This is added to the <i>PlxSglDmaChannelOpen</i> API in the PLX
driver.<br>
<br>
Affected files:&nbsp;&nbsp; <i>PciSdk\Windows\Driver\Common\PlxChip\Pci9080\ApiFunctions.c<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PciSdk\Windows\Driver\Common\PlxChip\Pci9054\ApiFunctions.c<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PciSdk\Windows\Driver\Common\PlxChip\Pci9056\ApiFunctions.c<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PciSdk\Windows\Driver\Common\PlxChip\Pci9656\ApiFunctions.c<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PlxLinux\linux\driver\common\PlxChip\Pci9080\ApiFunctions.c<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PlxLinux\linux\driver\common\PlxChip\Pci9054\ApiFunctions.c<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PlxLinux\linux\driver\common\PlxChip\Pci9056\ApiFunctions.c<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PlxLinux\linux\driver\common\PlxChip\Pci9656\ApiFunctions.c</i></p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:1.25in;text-indent:-.25in'><span style='font-family:"Courier New"'>o</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;
</span><i>[InterruptEvent Sample Application]: Fixed interrupt not triggered
properly for 9050/9052/9030 chips</i> <br>
The <i>InterruptEvent</i> sample application demonstrates how to wait for an
interrupt with the SDK API.&nbsp; For the PLX 9050/9052/9030 chips, the sample
waits for local interrupt 1 to trigger.&nbsp; The sample manually triggers the
interrupt by inverting the polarity bits.&nbsp; The problem occurs when the
polarity is already in a triggered state, so the sample actually halts the
interrupt. <br>
<br>
The fix is to first put the polarity in a state that de-activates the interrupt
before inverting it. <br>
<br>
Affected files:&nbsp;&nbsp; <i>PciSdk\Windows\Samples\IntEvt\IntEvt.c <br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PlxLinux\Samples\InterruptEvent\InterruptEvent.c</i></p>

<h2><a name="_2.__"></a><a name="_PCI_SDK_4.20"></a>PCI SDK 4.20</h2>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:63.0pt;text-indent:-.25in'><span style='font-family:Symbol'>·</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp; </span><b><i>Windows
Support for the PLX PCI 6000 Series PCI-to-PCI Bridge Chips</i></b><br>
SDK 4.20 introduces support for the PLX PCI 6000 family of PCI-to-PCI bridge
chips. &nbsp;The Windows support includes a generic PLX PCI service driver and
an updated version of PLXMon, which now supports the PCI 6000 series. &nbsp;A
new PCI host API is added to support the features of the new driver.&nbsp;
PLXMon (through the driver) contains new dialogs to view and modify the PCI
6000 PCI registers and configuration EEPROM values.</p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:63.0pt;text-indent:-.25in'><span style='font-family:Symbol'>·</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp; </span><b><i>Linux
Support for the PLX PCI 6000 Series PCI-to-PCI Bridge Chips</i></b><br>
Linux support for the PLX PCI 6000 family of PCI-to-PCI bridge chips is also
included in SDK 4.20.&nbsp; The Linux support includes a generic PLX PCI
service driver, which supports the new PCI host API.&nbsp; The API contains
function to read and write to the PCI 6000 PCI registers and configuration
EEPROM values.</p>

<p class=MsoBodyTextIndent style='margin-left:63.0pt;text-indent:-.25in'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp; </span><b><i>Bugs Fixed</i></b></p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:1.25in;text-indent:-.25in'><span style='font-family:"Courier New"'>o</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;
</span><i>[Windows Drivers]: Fixed limitation of mapping large PCI BAR spaces
to user virtual space</i><br>
In Windows systems, in order to map a PCI BAR space into user virtual space, a
Memory Descriptor List (MDL) must first be allocated to describe the
buffer.&nbsp; Although it is not documented in the Windows DDK, it turns out
there is a limitation on the amount of memory a single MDL can describe.&nbsp;
This is due to the fact that <b><i>IoAllocateMdl</i></b> only allocates 64k for
the MDL structure and the list of physical page pointers.&nbsp; Typically,
Windows uses 4k pages sizes, which limits the MDL to describe just under 64MB.<br>
<br>
The PLX driver works around this issue by creating multiple MDLs for large
buffers.&nbsp; The MDL structure already contains a <b><i>Next</i></b> field,
which the PLX driver uses to link the MDLs.&nbsp; Additional code was also
added to properly free all MDLs and map and unmap all MDLs for a PCI space.<br>
<br>
Affected files:&nbsp;&nbsp; <i>PciSdk\Windows\Driver\Common\DriverDefs.h<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PciSdk\Windows\Driver\Common\CommonApi.c<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PciSdk\Windows\Driver\Common\SupportFunc.c</i></p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:1.25in;text-indent:-.25in'><span style='font-family:"Courier New"'>o</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;
</span><i>[Windows Drivers]: Fixed incorrect unmapping of user-mode virtual
addresses to the Common Buffer</i><br>
When an application calls <i>PlxPciCommonBufferMap</i>, the PLX driver provides
a user-mode virtual address that the application can use to access the
buffer.&nbsp; The driver stores the mapping information in an internal list to
ensure proper cleanup if the application does not eventually call <i>PlxPciCommonBufferUnmap</i>.&nbsp;
On some systems, if multiple applications call <i>PlxPciCommonBufferMap</i>,
the assigned virtual address may be identical between one or more applications.<br>
<br>
When the application calls <i>PlxPciCommonBufferUnmap to </i>unmap the address,
the driver searches its internal list to locate information about the
mapping.&nbsp; The problem was that the driver would use the virtual address as
the key to locate the mapping item in the list.&nbsp; Since, it turns out, the
virtual addresses are not necessarily unique, the driver would mistakenly
identify an incorrect mapping object in the list.&nbsp; The eventual result is
that the driver may go into an endless loop constantly trying to locate a
mapping item.&nbsp; This causes applications to hang when they call <i>PlxPciDeviceClose</i>.<br>
<br>
In order to fix this, the PLX driver was modified to additionally compare the <b><i>owner</i></b>
of a mapping item, as well as the virtual address.&nbsp; The <b><i>owner</i></b>
is a unique object ID assigned by Windows to each application.&nbsp; This
guarantees proper unmapping, even if multiple applications share the same
virtual address.<br>
<br>
Affected files:&nbsp;&nbsp; <i>PciSdk\Windows\Driver\Common\Dispatch.c<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
P<i>ciSdk\Windows\Driver\Common\CommonApi.c<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PciSdk\Windows\Driver\Common\SupportFunc.c</i></p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:1.25in;text-indent:-.25in'><span style='font-family:"Courier New"'>o</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;
</span><i>[Linux Drivers]: Fixed SGL build of descriptors if the user buffer
exists in Linux High Memory</i><br>
In Linux systems with a large amount of memory (&gt; 1GB), user-mode buffers
are typically allocated from the High Memory region.&nbsp; High Memory is
defined as the region for which the kernel does not have logical addresses and
is enabled with the kernel option <b><i>CONFIG_HIGHMEM</i></b>.&nbsp; The
memory addressing limitations are due to the Linux memory region split of the
kernel and user virtual spaces.<br>
<br>
The PLX driver problem arises during the build of the SGL descriptors, which
describe the user-mode buffer, when the <i>PlxSglDmaTransfer()</i> API is
called, in the support function <i>PlxLockBufferAndBuildSgl()</i>.&nbsp;
Originally, the PLX driver obtained the PCI (logical) address by mapping a page
with <i>kmap()</i>, then calling the function <i>virt_to_bus()</i> to obtain
the PCI address.&nbsp; It turns out that <i>virt_to_bus()</i> does not work for
virtual addresses in high memory.&nbsp; As a result, an invalid PCI/bus address
is returned, so the PLX DMA engine would transfer from incorrect locations and
could easily corrupt system memory.<br>
<br>
To resolve the issue, the mechanism used to obtain the PCI address was
modified.&nbsp; Rather than using <i>kmap()</i> and <i>virt_to_bus()</i>, the
PLX driver now use <i>pci_map_page()</i>, which returns a valid PCI address
even if a page is in high memory.&nbsp; <i>pci_map_page()</i> is not available
on Linux 2.2 kernels, but that kernel does not support high memory
anyway.&nbsp; <i>Plx_sysdep.h</i> takes care of implementing this for kernel
v2.2.&nbsp; Note that additional cleanup was required in <i>PlxSglDmaTransferComplete()</i>
to unmap the pages.<br>
<br>
Affected files: &nbsp; <i>PlxLinux\linux\driver\common\Plx_sysdep.h<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PlxLinux\linux\driver\common\DriverDefs.h<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PlxLinux\linux\driver\common\SupportFunc.c</i></p>

<p class=MsoBodyTextIndent style='margin-left:1.25in'><b><i>Note</i></b><i>:
This issue was actually fixed in SDK 4.1, but the updated files were not
included in the SDK 4.1 file <b>PlxLinux.tar</b>.&nbsp; Instead, a patch was
provided on the SDK 4.1 CD for end-users to apply.&nbsp; SDK 4.20 includes the
updated files in the PLX Linux TAR file.&nbsp; An additional patch is no longer
necessary.</i></p>

<h2><a name="_SDK_4.10_1"></a><a name="_3.__"></a><a name="_PCI_SDK_4.10"></a>PCI
SDK 4.10</h2>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:.75in;text-indent:-9.0pt'><span style='font-family:Symbol'>·</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp; </span><b><i>Building
PLX WDM Drivers with the XP DDK</i></b><br>
In previous SDK versions, the PLX WDM drivers were built with the Windows 2000
DDK and Visual C++ 6.0.&nbsp; The PLX drivers can now be built with the XP DDK
and they remain compatible with the Windows 2000 DDK.<br>
<br>
<b><i>Note</i></b><i>:&nbsp; The XP DDK includes the tools necessary to build
drivers.&nbsp; Visual C++ is no longer needed in conjunction with the DDK.</i></p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:.75in;text-indent:-9.0pt'><span style='font-family:Symbol'>·</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp; </span><b><i>Windows
Driver Physical Memory Allocation with DMA Adapter Objects</i></b><br>
In previous SDK versions, PLX Windows drivers allocated physical memory (e.g.
Common buffer) with Memory Manager driver support routines (i.e. <i>MmAllocateContiguousMemory</i>,
<i>MmGetPhysicalAddress</i>, etc.).&nbsp; Although this method works on current
architectures, it is not recommended when physical memory will be used with I/O
devices.&nbsp; The problem is with the addressing of the memory.&nbsp; The Host
CPU physical address to a buffer may be different than the PCI address, which
is the address used by an I/O device.<br>
<br>
The correct method, then, for allocating and working with physical memory is to
use a <i>DMA Adapter Object</i>.&nbsp; This object provides routines to
allocate physical memory and also provide a <i>Logical</i> address, which both
the Host CPU and an I/O device can use to access the same physical
buffer.&nbsp; In SDK 4.1, the PLX drivers have been updated to use DMA Adapter
Objects instead of the Memory Manager routines.<br>
<br>
<i>Refer to the Windows DDK documentation for details about DMA Adapter Objects</i>.<a
name="_Windows_Driver_Physical"></a></p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:.75in;text-indent:-9.0pt'><span style='font-family:Symbol'>·</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp; </span><b><i>Windows
Drivers Physical Memory Cacheable Option</i></b><br>
A new option was added to the PLX-specific driver options in the
registry.&nbsp; In previous SDK releases, physical memory allocated by the
driver was always configured as non-[data] cacheable.&nbsp; Although greater
performance can be achieved by enabling caching, there were concerns with data
cache coherency issues since I/O devices, as well as the Host CPU, can update
physical memory.&nbsp; It is believed that the Host CPU “snoops” the bus to
maintain cache coherency, but PLX cannot guarantee this on all platforms.&nbsp;
As a result, the cacheable option is disabled by default, but users can now
modify the registry entry to enable caching.<br>
<br>
<i>Refer to the registry settings section in the <b>Plx User’s Manual</b> for
more information</i>.<a name="_Windows_Drivers_Physical"></a></p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:.75in;text-indent:-9.0pt'><span style='font-family:Symbol'>·</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp; </span><b><i>Centralized
Driver Options in Registry for Windows 98/Me</i></b><br>
In Windows 98/Me, there is no documented central location for OEM
driver-specific options.&nbsp; In previous SDK releases, PLX drivers just used
the registry path provided by the OS when the driver starts.&nbsp; In Windows
98/Me, the registry settings could be scattered in difficult to locate paths
and could be replicated numerous times, depending upon the number of devices
installed.<br>
<br>
In SDK 4.1, PLX centralized the PLX-specific driver options in Windows
98/Me.&nbsp; The new path is <i>HKLM\Software\Plx Technology,
Inc.\DriverOptions\&lt;DriverName&gt;</i>.&nbsp; Users can now easily find and
modify the PLX driver settings.<br>
<br>
<i>Refer to the registry settings section in the <b>Plx User’s Manual</b> for
more information</i>.<a name="_Centralized_Driver_Options"></a></p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:.75in;text-indent:-9.0pt'><span style='font-family:Symbol'>·</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp; </span><b><i>Support
for Linux RedHat 7.x, 8.0, and 9.0</i></b><br>
The PLX Host-side Linux support has been updated to support newer releases of
RedHat.<a name="_Support_for_Linux"></a></p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:.75in;text-indent:-9.0pt'><span style='font-family:Symbol'>·</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp; </span><b><i>PLXMon
– New “View All PCI Devices” Dialog</i></b><br>
In PLXMon, a new dialog box was added, which scans the PCI bus and displays a
list of all PCI devices found in the system, including non-PLX devices.&nbsp;
Additionally, the complete 256 bytes of PCI configuration space can be
viewed.&nbsp; This is helpful, for example, when trying to determine the PCI
BAR address of a secondary device.<br>
<br>
<b><i>Note</i></b><i>:&nbsp; A valid PLX device (&amp; PLX driver) MUST be
installed for this feature to work.&nbsp; The dialog box is not available in
serial mode.&nbsp; Additionally, PLXMon does not allow modification of the PCI
registers of an arbitrary device.&nbsp; The registers can only be read/viewed.</i><a
name="_PLXMon_–_New"></a></p>

<p class=MsoBodyTextIndent style='margin-left:.75in;text-indent:-9.0pt'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp; </span><b><i>Bugs Fixed</i></b></p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:1.25in;text-indent:-.25in'><a name="_Bugs_Fixed_in"></a><span
style='font-family:"Courier New"'>o</span><span style='font-size:7.0pt;
font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp; </span><i>[Linux
Drivers]: For PlxIntrWait, replaced <b>interruptible_sleep_on_timeout()</b>
with <b>Plx_wait_event_interruptible_timeout()</b></i><br>
The Linux function <b><i>interruptible_sleep_on_timeout()</i></b> is
susceptible to race conditions and its use is no longer recommended.&nbsp; In
PLX drivers, this function was used to wait for an interrupt event.&nbsp; A
race condition existed between checking of the <i>Pending</i> flag of the interrupt
wait object, which determines if <b><i>interruptible_sleep_on_timeout()</i></b>
gets called, and the calling of the DPC routine.&nbsp; This resulted in timeout
conditions even if the interrupt event already occurred.&nbsp; This was fixed
by implementing the function <b><i>Plx_wait_event_interruptible_timeout()</i></b>
to replace <b><i>interruptible_sleep_on_timeout()</i></b>.&nbsp; The new
function periodically checks a condition, which allows it to exit before the
timeout is reached.<br>
<br>
Affected files:&nbsp;&nbsp; <i>PlxLinux\linux\driver\common\Plx_sysdep.h<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
PlxLinux\linux\driver\common\CommonApi.h</i></p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:1.25in;text-indent:-.25in'><span style='font-family:"Courier New"'>o</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;
</span><i>[Linux Drivers]: Added support for “Local Address Remains Constant”
feature in PlxDmaSglTransfer API call<br>
</i>In the support function, <b><i>PlxLockBufferAndBuildSgl()</i></b>, when the
descriptors are built to transfer a user-mode buffer, the “Local Address
Remains Constant” field was ignored.&nbsp; This was fixed by only incrementing
the local address in the descriptors if “Local Address Remains Constant” is
disabled. <br>
<br>
Affected files:&nbsp;&nbsp; <i>PlxLinux\linux\driver\common\SupportFunc.c</i></p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:1.25in;text-indent:-.25in'><span style='font-family:"Courier New"'>o</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;
</span><i>[Linux Drivers]: Fixed DMA channel 1 interrupt handling <br>
</i>In the DPC routine for DMA master chips, the check for the DMA channel 1
interrupt flag referred to the wrong variable.&nbsp; As a result, DMA channel 1
interrupts may not get handled properly, resulting in a constant calling of the
Interrupt Service Routine.&nbsp; The variable was corrected to properly
identify and handle the interrupt.<br>
<br>
Affected files:&nbsp;&nbsp; <i>Linux\Driver\PlxChip\Pci9080\PlxInterrupt.c<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Linux\Driver\PlxChip\Pci9054\PlxInterrupt.c<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Linux\Driver\PlxChip\Pci9056\PlxInterrupt.c<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Linux\Driver\PlxChip\Pci9656\PlxInterrupt.c</i></p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:1.25in;text-indent:-.25in'><span style='font-family:"Courier New"'>o</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp;
</span><i>[Local-side API]: Fixed SGL DMA API waits forever for DMA completion<br>
</i>In the local-side <b><i>PlxDmaSglTransfer</i>()</b> API call, the function
waits for DMA completion by polling a field in a structure in a <i>while()</i>
loop.&nbsp; The Interrupt Service Routine updates the field when a DMA done
interrupt occurs, resulting in an exit of the <i>while()</i> loop.&nbsp; In the
<i>Release</i> build of an image, however, a compiler optimization prevents the
loop from noticing the new value after the ISR has updated it.&nbsp; It is
possible that the field is checked from a register rather than directly from
memory (the use of “volatile” did not help).&nbsp; The result is an endless
loop condition and <b><i>PlxDmaSglTransfer</i>()</b> never returns.<br>
<br>
This issue was fixed by implementing a timeout feature and additionally poll
DMA done bit.&nbsp; This prevents the endless loop condition when waiting for a
DMA completion.<br>
<br>
Affected files:&nbsp;&nbsp; <i>PciSdk\Iop\Api\9054\DmaFunctions.c <br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PciSdk\Iop\Api\9056\DmaFunctions.c<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PciSdk\Iop\Api\9656\DmaFunctions.c</i></p>

<p class=MsoNormal style='margin-left:1.25in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o</span><span style='font-size:7.0pt;
font-family:"Times New Roman","serif"'>&nbsp;&nbsp;&nbsp; </span><i>[Local-side
API]: Fixed Shuttle DMA API never starts the DMA engine <br>
</i>In the local-side <b><i>PlxDmaShuttleChannelOpen()</i></b><i> </i>API call,
the function sets up the DMA channel with a circular SGL list (DMA descriptors)
and starts the DMA engine. &nbsp;The problem is when the DMA Command/Status
register is written to enable and start the DMA engine, an invalid value is
written to the register.&nbsp; The original code wrote the variable &quot;<i>RegValue</i>&quot;
to the chip without first initializing it to the value currently in the
Command/Status register.&nbsp; &quot;<i>RegValue</i>&quot; actually contained
the value from a previous read of the DMA threshold register.<br>
<br>
This issue was fixed by updating the <b><i>PlxDmaShuttleChannelOpen()</i></b><i>
</i>API call to read the DMA Command/Status register before writing to it.<br>
<br>
Affected files:&nbsp;&nbsp; <i>PciSdk\Iop\Api\9054\DmaFunctions.c <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
PciSdk\Iop\Api\9056\DmaFunctions.c<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
PciSdk\Iop\Api\9656\DmaFunctions.c</i></p>

<h2><a name="_SDK_4.0"></a><a name="_4.__"></a><a name="_PCI_SDK_4.0"></a>PCI
SDK 4.0</h2>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:.75in;text-indent:-8.65pt'><span style='font-family:Symbol'>·</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp; </span><i>[VxWorks
Host]:&nbsp; Added a VxWorks Host-side driver for the 9054, 9056, &amp; 9656</i><br>
This driver is minimal.&nbsp; It demonstrates how to load the driver and access
the PLX chip.&nbsp; The tested platform was VxWorks running on a Motorola
MCP750 Host board.</p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:.75in;text-indent:-8.65pt'><span style='font-family:Symbol'>·</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp; </span><i>[Linux
Drivers]:&nbsp; Fixed compile errors with SMP kernel source</i></p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:.75in;text-indent:-8.65pt'><span style='font-family:Symbol'>·</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp; </span><i>[Linux
Drivers]:&nbsp; Fixed virtual mappings to user space by marking the pages as <b>Reserved</b></i><br>
Affected files:&nbsp;&nbsp; <i>PlxLinux\linux\driver\common\PciSupport.c</i></p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:.75in;text-indent:-8.65pt'><span style='font-family:Symbol'>·</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp; </span><i>[Embedded
Linux BSP]:&nbsp; Added an Embedded Linux BSP to support the Compact PCI
9x56-860 RDKs</i>.</p>

<h2><a name="_SDK_v3.5"></a><a name="_5.__"></a><a name="_PCI_SDK_3.5"></a>PCI
SDK 3.5</h2>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:.75in;text-indent:-9.0pt'><span style='font-family:Symbol'>·</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp; </span><i>[9030
&amp; 9050/52 Windows Drivers]:&nbsp; Fixed <b>InterruptSource</b> variable not
cleared in ISR</i><br>
In <i>OnInterrupt()</i> ISR routine for the 9030 and 9050/9052, when the
routine starts to query the chip for the interrupt source, it sets flags in a
variable for each active interrupt.&nbsp; The problem was that the variable <i>InterruptSource</i>
was not cleared before settings the flags.&nbsp; As a result, its initial value
was undefined.&nbsp; The fix was to set reset the variable by setting it to
INTR_TYPE_NONE.<br>
<br>
Affected files:&nbsp;&nbsp; <i>PciSdk\Windows\Driver\Common\PlxChip\Pci9030\PlxInterrupts.c</i><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PciSdk\Windows\Driver\Common\PlxChip\Pci9050\PlxInterrupts.c</i></p>

<p class=MsoBodyTextIndent style='margin-left:.75in;text-indent:-9.0pt'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp; </span><i>[Host-side API]:
&nbsp;Revised the DMA_ELEMENT structure</i><br>
In an effort to provide a cleaner interface and improve performance, the
DMA_ELEMENT structure has been generalized to support all PLX chips instead of
a different definition for each chip.&nbsp; This makes coding simpler and
portable when using different PLX chip types.&nbsp; The DMA_ELEMENT structure
is used in the <i>PlxDmaBlockTransfer</i> and <i>PlxDmaSglTransfer</i> API
calls.&nbsp; Please refer to the definition in the <i>PlxTypes.h</i> header
file or refer to the DMA sample applications, which use the DMA_ELEMENT
structure.<br>
<br>
Affected file:&nbsp;&nbsp;&nbsp;&nbsp; <i>PciSdk\Inc\PlxTypes.h</i></p>

<h2><a name="_SDK_v3.4"></a><a name="_6.__"></a><a name="_PCI_SDK_3.4"></a>PCI
SDK 3.4</h2>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:.75in;text-indent:-9.0pt'><span style='font-family:Symbol'>·</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp; </span><i>[Windows
Drivers]:&nbsp; Fixed possible incorrect interrupt reporting with shared
interrupts</i><br>
In previous SDK releases, the Windows driver Interrupt Service Routine (ISR)
may erroneously report that a PLX chip interrupt is active.&nbsp; This is
because some interrupt status bits denote an active status, regardless of any
mask bits.&nbsp; Previous ISRs only checked the status bits to verify that an
interrupt is active.&nbsp; This issue may arise only if the PLX chip shares an
interrupt with another PCI device.&nbsp; This behavior does not cause errors,
but may impact performance slightly since the PLX driver could erroneously
claim the interrupt as its own.&nbsp; Since the PCI interrupt is then masked,
the true interrupting device's ISR would then get called.<br>
<br>
To resolve this, the ISR now verifies the source of any active interrupt by
checking the mask bit, as well as the status bit.&nbsp; The ISR and <i>DpcForIsr</i>
function were modified to incorporate this efficiently.<br>
<br>
Affected files:&nbsp;&nbsp; <i>PciSdk\Windows\Driver\Common\PlxChip\&lt;DriverName&gt;\PlxInterrupts.c</i></p>

<p class=MsoBodyTextIndent style='margin-left:.75in;text-indent:-9.0pt'><span
style='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:
"Times New Roman","serif"'>&nbsp;&nbsp; </span><i>[PLX BSPs]:&nbsp; Fixed
incomplete PPC register saving during exceptions</i><br>
In all provided PLX BSPs, it was found that some PPC registers were not saved
on the stack during an exception.&nbsp; These are the Count Register (CTR) and
Floating-point Exception register (XER).&nbsp; This could affect code, which
uses these registers, when an interrupt occurs.&nbsp; The <i>memcpy()</i>
function is one example, which typically uses the CTR register.&nbsp; To fix
this, the stack frame of all exception vectors was modified to additionally
save these 2 registers upon entry and restored when the exception handler
completes.<br>
<br>
Affected files:&nbsp;&nbsp; <i>PciSdk\Iop\Bsp\&lt;Board&gt;.rdk\PlxOemCpuInterrupts.as</i></p>

<h2><a name="_SDK_v3.3"></a><a name="_7.__"></a><a name="_PCI_SDK_3.3"></a><a
href="#_9.__"><span style='color:windowtext'>PCI SDK 3.3</span></a></h2>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:.75in;text-indent:-9.0pt'><span style='font-family:Symbol'>·</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp; </span><i>[Windows
Drivers]:&nbsp; Fixed issues with synchronization to interrupt register in SMP
systems<br>
</i>This issue arose in multi-CPU systems with a high rate of PLX
interrupts.&nbsp; The PLX Driver interrupt routine, DPC for ISR, and PLX
Interrupt Enable/Disable API calls all access the Interrupt Control/Status
register.&nbsp; The API calls were synchronized with the ISR, but that allowed
them to pre-empt the DPC routine.&nbsp; This resulted in corruption of the
Interrupt Control/Status register.&nbsp; The fix was to incorporate
synchronized access to the interrupt register in the DPC routine.<br>
<br>
Affected files:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <i>PciSdk\Windows\Driver\Common\PlxChip\&lt;DriverName&gt;\PlxInterrupts.c</i></p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:.75in;text-indent:-9.0pt'><span style='font-family:Symbol'>·</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp; </span><i>[Windows
Drivers]:&nbsp; Fixed the 9030/9050/9052 Software Interrupt not handled<br>
</i>The previous PLX drivers ignored the Software Interrupt feature of these
chips.&nbsp; When a developer attempted to manually set the interrupt, the
result was a system hang because the PLX driver ISR would continuously get
called, resulting in a non-responsive system.&nbsp; The fix was to modify the
ISR and DPC to handle the software interrupt.&nbsp; A field was added to the
PLX_INTR structure and the DPC routine disables the interrupt if it is
active.&nbsp; Applications are also now able register for Software Interrupt
notification.<br>
<br>
Affected files:&nbsp;&nbsp; <i>PciSdk\Inc\PlxTypes.h<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PciSdk\Windows\Driver\Common\PlxChip\Pci9030\ApiFunctions.c</i><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PciSdk\Windows\Driver\Common\PlxChip\Pci9030\PlxInterrupts.c</i><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<i>PciSdk\Windows\Driver\Common\PlxChip\Pci9050\PlxInterrupts.c</i></p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:.75in;text-indent:-9.0pt'><span style='font-family:Symbol'>·</span><span
style='font-size:7.0pt;font-family:"Times New Roman","serif"'>&nbsp;&nbsp; </span><i>[Windows
Drivers]:&nbsp; Fixed Blue Screen/system crash result when an application exits<br>
</i>When an application uses the PLX API, the driver uses some memory to track
resources used/opened by the application.&nbsp; This allows the driver to
release the resources if the application exits abnormally.&nbsp; Blue screens
resulted because the driver memory was allocated from the Paged memory.&nbsp;
When the driver acquired the Spin Lock to traverse the list of resources, a
Page Fault could occur if the list was not in physical memory.&nbsp; Since Page
Faults are not allowed while a Spin Lock is held, the result is a blue
screen/system crash.&nbsp; To fix this issue, the driver memory allocation
routine was modified to use Non-Paged memory to avoid Page Faults.<br>
<br>
Affected files:&nbsp;&nbsp; <i>PciSdk\Windows\Driver\Common\SupportFunc.c</i></p>

<p class=MsoBodyTextIndent style='margin-top:3.0pt;margin-right:0in;margin-bottom:
12.0pt;margin-left:0in'>&nbsp;</p>

</div>

</body>

</html>
